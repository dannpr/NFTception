// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFTInPlanet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTInPlanet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTInPlanet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTInPlanet", id.toString(), this);
  }

  static load(id: string): NFTInPlanet | null {
    return store.get("NFTInPlanet", id) as NFTInPlanet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get nftAddress(): string {
    let value = this.get("nftAddress");
    return value.toString();
  }

  set nftAddress(value: string) {
    this.set("nftAddress", Value.fromString(value));
  }

  get planet(): string {
    let value = this.get("planet");
    return value.toString();
  }

  set planet(value: string) {
    this.set("planet", Value.fromString(value));
  }
}

export class Planet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Planet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Planet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Planet", id.toString(), this);
  }

  static load(id: string): Planet | null {
    return store.get("Planet", id) as Planet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get planetId(): string {
    let value = this.get("planetId");
    return value.toString();
  }

  set planetId(value: string) {
    this.set("planetId", Value.fromString(value));
  }

  get nbSlots(): string {
    let value = this.get("nbSlots");
    return value.toString();
  }

  set nbSlots(value: string) {
    this.set("nbSlots", Value.fromString(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }
}

export class Slot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Slot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Slot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Slot", id.toString(), this);
  }

  static load(id: string): Slot | null {
    return store.get("Slot", id) as Slot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get planet(): string {
    let value = this.get("planet");
    return value.toString();
  }

  set planet(value: string) {
    this.set("planet", Value.fromString(value));
  }

  get nftInPlanet(): string {
    let value = this.get("nftInPlanet");
    return value.toString();
  }

  set nftInPlanet(value: string) {
    this.set("nftInPlanet", Value.fromString(value));
  }
}
