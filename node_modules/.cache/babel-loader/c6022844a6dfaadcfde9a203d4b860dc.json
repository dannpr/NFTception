{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n      const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/Users/macdann/Desktop/ethccHack-NFT/Solar-NFT/src/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MACZ,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7B;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC;AACA,QAAID,MAAM,CAACE,QAAX,EAAqB;AACjB,YAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAb;;AACA,UAAI;AACA;AACA,cAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN,CAFA,CAGA;;AACAN,QAAAA,OAAO,CAACK,IAAD,CAAP;AACH,OALD,CAKE,OAAOE,KAAP,EAAc;AACZN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACH;AACJ,KAVD,CAWA;AAXA,SAYK,IAAIL,MAAM,CAACG,IAAX,EAAiB;AAClB;AACA,YAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAT,MAAAA,OAAO,CAACK,IAAD,CAAP;AACH,KALI,CAML;AANK,SAOA;AACD,YAAMK,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CACb,uBADa,CAAjB;AAGA,YAAMP,IAAI,GAAG,IAAIR,IAAJ,CAASa,QAAT,CAAb;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAT,MAAAA,OAAO,CAACK,IAAD,CAAP;AACH;AACJ,GA7BD;AA8BH,CAhCD,CADJ;;AAmCA,eAAeP,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    // Acccounts now exposed\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:8545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}