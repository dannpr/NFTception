{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar car = require('@ipld/car');\n\nclass TreewalkCarJoiner {\n  constructor(cars) {\n    this._cars = Array.from(cars);\n    if (!this._cars.length) throw new Error('missing CARs');\n  }\n\n  async *car() {\n    const reader = this._cars[0];\n    const roots = await reader.getRoots();\n    const {\n      writer,\n      out\n    } = car.CarWriter.create(roots);\n\n    const writeCar = async () => {\n      const written = new Set();\n\n      const writeBlocks = async reader => {\n        for await (const b of reader.blocks()) {\n          if (written.has(b.cid.toString())) continue;\n          await writer.put(b);\n          written.add(b.cid.toString());\n        }\n      };\n\n      try {\n        await writeBlocks(reader);\n\n        for (const reader of this._cars.slice(1)) {\n          await writeBlocks(reader);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await writer.close();\n      }\n    };\n\n    writeCar();\n    yield* out;\n  }\n\n}\n\nexports.TreewalkCarJoiner = TreewalkCarJoiner;","map":{"version":3,"sources":["/Users/macdann/Desktop/ethccHack-NFT/Solar-NFT/node_modules/carbites/cjs/lib/treewalk/joiner.js"],"names":["Object","defineProperty","exports","value","car","require","TreewalkCarJoiner","constructor","cars","_cars","Array","from","length","Error","reader","roots","getRoots","writer","out","CarWriter","create","writeCar","written","Set","writeBlocks","b","blocks","has","cid","toString","put","add","slice","err","console","error","close"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AAEA,MAAMC,iBAAN,CAAwB;AACtBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,KAAL,GAAaC,KAAK,CAACC,IAAN,CAAWH,IAAX,CAAb;AACA,QAAI,CAAC,KAAKC,KAAL,CAAWG,MAAhB,EACE,MAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACH;;AACS,SAAHT,GAAG,GAAG;AACX,UAAMU,MAAM,GAAG,KAAKL,KAAL,CAAW,CAAX,CAAf;AACA,UAAMM,KAAK,GAAG,MAAMD,MAAM,CAACE,QAAP,EAApB;AACA,UAAM;AAACC,MAAAA,MAAD;AAASC,MAAAA;AAAT,QAAgBd,GAAG,CAACe,SAAJ,CAAcC,MAAd,CAAqBL,KAArB,CAAtB;;AACA,UAAMM,QAAQ,GAAG,YAAY;AAC3B,YAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;AACA,YAAMC,WAAW,GAAG,MAAMV,MAAN,IAAgB;AAClC,mBAAW,MAAMW,CAAjB,IAAsBX,MAAM,CAACY,MAAP,EAAtB,EAAuC;AACrC,cAAIJ,OAAO,CAACK,GAAR,CAAYF,CAAC,CAACG,GAAF,CAAMC,QAAN,EAAZ,CAAJ,EACE;AACF,gBAAMZ,MAAM,CAACa,GAAP,CAAWL,CAAX,CAAN;AACAH,UAAAA,OAAO,CAACS,GAAR,CAAYN,CAAC,CAACG,GAAF,CAAMC,QAAN,EAAZ;AACD;AACF,OAPD;;AAQA,UAAI;AACF,cAAML,WAAW,CAACV,MAAD,CAAjB;;AACA,aAAK,MAAMA,MAAX,IAAqB,KAAKL,KAAL,CAAWuB,KAAX,CAAiB,CAAjB,CAArB,EAA0C;AACxC,gBAAMR,WAAW,CAACV,MAAD,CAAjB;AACD;AACF,OALD,CAKE,OAAOmB,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,OAPD,SAOU;AACR,cAAMhB,MAAM,CAACmB,KAAP,EAAN;AACD;AACF,KApBD;;AAqBAf,IAAAA,QAAQ;AACR,WAAOH,GAAP;AACD;;AAjCqB;;AAoCxBhB,OAAO,CAACI,iBAAR,GAA4BA,iBAA5B","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar car = require('@ipld/car');\n\nclass TreewalkCarJoiner {\n  constructor(cars) {\n    this._cars = Array.from(cars);\n    if (!this._cars.length)\n      throw new Error('missing CARs');\n  }\n  async *car() {\n    const reader = this._cars[0];\n    const roots = await reader.getRoots();\n    const {writer, out} = car.CarWriter.create(roots);\n    const writeCar = async () => {\n      const written = new Set();\n      const writeBlocks = async reader => {\n        for await (const b of reader.blocks()) {\n          if (written.has(b.cid.toString()))\n            continue;\n          await writer.put(b);\n          written.add(b.cid.toString());\n        }\n      };\n      try {\n        await writeBlocks(reader);\n        for (const reader of this._cars.slice(1)) {\n          await writeBlocks(reader);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await writer.close();\n      }\n    };\n    writeCar();\n    yield* out;\n  }\n}\n\nexports.TreewalkCarJoiner = TreewalkCarJoiner;\n"]},"metadata":{},"sourceType":"script"}