{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar decoder = require('./decoder.js');\n\nclass CarReader {\n  constructor(version, roots, blocks) {\n    this._version = version;\n    this._roots = roots;\n    this._blocks = blocks;\n    this._keys = blocks.map(b => b.cid.toString());\n  }\n\n  get version() {\n    return this._version;\n  }\n\n  async getRoots() {\n    return this._roots;\n  }\n\n  async has(key) {\n    return this._keys.indexOf(key.toString()) > -1;\n  }\n\n  async get(key) {\n    const index = this._keys.indexOf(key.toString());\n\n    return index > -1 ? this._blocks[index] : undefined;\n  }\n\n  async *blocks() {\n    for (const block of this._blocks) {\n      yield block;\n    }\n  }\n\n  async *cids() {\n    for (const block of this._blocks) {\n      yield block.cid;\n    }\n  }\n\n  static async fromBytes(bytes) {\n    if (!(bytes instanceof Uint8Array)) {\n      throw new TypeError('fromBytes() requires a Uint8Array');\n    }\n\n    return decodeReaderComplete(decoder.bytesReader(bytes));\n  }\n\n  static async fromIterable(asyncIterable) {\n    if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n      throw new TypeError('fromIterable() requires an async iterable');\n    }\n\n    return decodeReaderComplete(decoder.asyncIterableReader(asyncIterable));\n  }\n\n}\n\nasync function decodeReaderComplete(reader) {\n  const decoder$1 = decoder.createDecoder(reader);\n  const {\n    version,\n    roots\n  } = await decoder$1.header();\n  const blocks = [];\n\n  for await (const block of decoder$1.blocks()) {\n    blocks.push(block);\n  }\n\n  return new CarReader(version, roots, blocks);\n}\n\nconst __browser = true;\nexports.CarReader = CarReader;\nexports.__browser = __browser;","map":{"version":3,"sources":["/Users/macdann/Desktop/ethccHack-NFT/Solar-NFT/node_modules/@ipld/car/cjs/lib/reader-browser.js"],"names":["Object","defineProperty","exports","value","decoder","require","CarReader","constructor","version","roots","blocks","_version","_roots","_blocks","_keys","map","b","cid","toString","getRoots","has","key","indexOf","get","index","undefined","block","cids","fromBytes","bytes","Uint8Array","TypeError","decodeReaderComplete","bytesReader","fromIterable","asyncIterable","Symbol","asyncIterator","asyncIterableReader","reader","decoder$1","createDecoder","header","push","__browser"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAClC,SAAKC,QAAL,GAAgBH,OAAhB;AACA,SAAKI,MAAL,GAAcH,KAAd;AACA,SAAKI,OAAL,GAAeH,MAAf;AACA,SAAKI,KAAL,GAAaJ,MAAM,CAACK,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACC,GAAF,CAAMC,QAAN,EAAhB,CAAb;AACD;;AACU,MAAPV,OAAO,GAAG;AACZ,WAAO,KAAKG,QAAZ;AACD;;AACa,QAARQ,QAAQ,GAAG;AACf,WAAO,KAAKP,MAAZ;AACD;;AACQ,QAAHQ,GAAG,CAACC,GAAD,EAAM;AACb,WAAO,KAAKP,KAAL,CAAWQ,OAAX,CAAmBD,GAAG,CAACH,QAAJ,EAAnB,IAAqC,CAAC,CAA7C;AACD;;AACQ,QAAHK,GAAG,CAACF,GAAD,EAAM;AACb,UAAMG,KAAK,GAAG,KAAKV,KAAL,CAAWQ,OAAX,CAAmBD,GAAG,CAACH,QAAJ,EAAnB,CAAd;;AACA,WAAOM,KAAK,GAAG,CAAC,CAAT,GAAa,KAAKX,OAAL,CAAaW,KAAb,CAAb,GAAmCC,SAA1C;AACD;;AACY,SAANf,MAAM,GAAG;AACd,SAAK,MAAMgB,KAAX,IAAoB,KAAKb,OAAzB,EAAkC;AAChC,YAAMa,KAAN;AACD;AACF;;AACU,SAAJC,IAAI,GAAG;AACZ,SAAK,MAAMD,KAAX,IAAoB,KAAKb,OAAzB,EAAkC;AAChC,YAAMa,KAAK,CAACT,GAAZ;AACD;AACF;;AACqB,eAATW,SAAS,CAACC,KAAD,EAAQ;AAC5B,QAAI,EAAEA,KAAK,YAAYC,UAAnB,CAAJ,EAAoC;AAClC,YAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AACD,WAAOC,oBAAoB,CAAC5B,OAAO,CAAC6B,WAAR,CAAoBJ,KAApB,CAAD,CAA3B;AACD;;AACwB,eAAZK,YAAY,CAACC,aAAD,EAAgB;AACvC,QAAI,CAACA,aAAD,IAAkB,EAAE,OAAOA,aAAa,CAACC,MAAM,CAACC,aAAR,CAApB,KAA+C,UAAjD,CAAtB,EAAoF;AAClF,YAAM,IAAIN,SAAJ,CAAc,2CAAd,CAAN;AACD;;AACD,WAAOC,oBAAoB,CAAC5B,OAAO,CAACkC,mBAAR,CAA4BH,aAA5B,CAAD,CAA3B;AACD;;AAzCa;;AA2ChB,eAAeH,oBAAf,CAAoCO,MAApC,EAA4C;AAC1C,QAAMC,SAAS,GAAGpC,OAAO,CAACqC,aAAR,CAAsBF,MAAtB,CAAlB;AACA,QAAM;AAAC/B,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAmB,MAAM+B,SAAS,CAACE,MAAV,EAA/B;AACA,QAAMhC,MAAM,GAAG,EAAf;;AACA,aAAW,MAAMgB,KAAjB,IAA0Bc,SAAS,CAAC9B,MAAV,EAA1B,EAA8C;AAC5CA,IAAAA,MAAM,CAACiC,IAAP,CAAYjB,KAAZ;AACD;;AACD,SAAO,IAAIpB,SAAJ,CAAcE,OAAd,EAAuBC,KAAvB,EAA8BC,MAA9B,CAAP;AACD;;AACD,MAAMkC,SAAS,GAAG,IAAlB;AAEA1C,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACAJ,OAAO,CAAC0C,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar decoder = require('./decoder.js');\n\nclass CarReader {\n  constructor(version, roots, blocks) {\n    this._version = version;\n    this._roots = roots;\n    this._blocks = blocks;\n    this._keys = blocks.map(b => b.cid.toString());\n  }\n  get version() {\n    return this._version;\n  }\n  async getRoots() {\n    return this._roots;\n  }\n  async has(key) {\n    return this._keys.indexOf(key.toString()) > -1;\n  }\n  async get(key) {\n    const index = this._keys.indexOf(key.toString());\n    return index > -1 ? this._blocks[index] : undefined;\n  }\n  async *blocks() {\n    for (const block of this._blocks) {\n      yield block;\n    }\n  }\n  async *cids() {\n    for (const block of this._blocks) {\n      yield block.cid;\n    }\n  }\n  static async fromBytes(bytes) {\n    if (!(bytes instanceof Uint8Array)) {\n      throw new TypeError('fromBytes() requires a Uint8Array');\n    }\n    return decodeReaderComplete(decoder.bytesReader(bytes));\n  }\n  static async fromIterable(asyncIterable) {\n    if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n      throw new TypeError('fromIterable() requires an async iterable');\n    }\n    return decodeReaderComplete(decoder.asyncIterableReader(asyncIterable));\n  }\n}\nasync function decodeReaderComplete(reader) {\n  const decoder$1 = decoder.createDecoder(reader);\n  const {version, roots} = await decoder$1.header();\n  const blocks = [];\n  for await (const block of decoder$1.blocks()) {\n    blocks.push(block);\n  }\n  return new CarReader(version, roots, blocks);\n}\nconst __browser = true;\n\nexports.CarReader = CarReader;\nexports.__browser = __browser;\n"]},"metadata":{},"sourceType":"script"}