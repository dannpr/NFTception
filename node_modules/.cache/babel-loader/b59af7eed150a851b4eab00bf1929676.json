{"ast":null,"code":"var THREE = require('three');\n/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\n\nTHREE.MTLLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.MTLLoader.prototype = {\n  constructor: THREE.MTLLoader,\n\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to load.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new THREE.FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text));\n    }, onProgress, onError);\n  },\n\n  /**\n   * Set base path for resolving references.\n   * If set this path will be prepended to each loaded and found reference.\n   *\n   * @see setTexturePath\n   * @param {String} path\n   * @return {THREE.MTLLoader}\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setPath: function (path) {\n    this.path = path;\n    return this;\n  },\n\n  /**\n   * Set base path for resolving texture references.\n   * If set this path will be prepended found texture reference.\n   * If not set and setPath is, it will be used as texture base path.\n   *\n   * @see setPath\n   * @param {String} path\n   * @return {THREE.MTLLoader}\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.setTexturePath( 'assets/textures/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setTexturePath: function (path) {\n    this.texturePath = path;\n    return this;\n  },\n  setBaseUrl: function (path) {\n    console.warn('THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.');\n    return this.setTexturePath(path);\n  },\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n  setMaterialOptions: function (value) {\n    this.materialOptions = value;\n    return this;\n  },\n\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {THREE.MTLLoader.MaterialCreator}\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to parse.\n   */\n  parse: function (text) {\n    var lines = text.split('\\n');\n    var info = {};\n    var delimiter_pattern = /\\s+/;\n    var materialsInfo = {};\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      var pos = line.indexOf(' ');\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      var value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else if (info) {\n        if (key === 'ka' || key === 'kd' || key === 'ks') {\n          var ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    var materialCreator = new THREE.MTLLoader.MaterialCreator(this.texturePath || this.path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n};\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function (baseUrl, options) {\n  this.baseUrl = baseUrl || '';\n  this.options = options;\n  this.materialsInfo = {};\n  this.materials = {};\n  this.materialsArray = [];\n  this.nameLookup = {};\n  this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n  this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n  constructor: THREE.MTLLoader.MaterialCreator,\n  crossOrigin: 'Anonymous',\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n  },\n  setManager: function (value) {\n    this.manager = value;\n  },\n  setMaterials: function (materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  },\n  convert: function (materialsInfo) {\n    if (!this.options) return materialsInfo;\n    var converted = {};\n\n    for (var mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n      var mat = materialsInfo[mn];\n      var covmat = {};\n      converted[mn] = covmat;\n\n      for (var prop in mat) {\n        var save = true;\n        var value = mat[prop];\n        var lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n                save = false;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  },\n  preload: function () {\n    for (var mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  },\n  getIndex: function (materialName) {\n    return this.nameLookup[materialName];\n  },\n  getAsArray: function () {\n    var index = 0;\n\n    for (var mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  },\n  create: function (materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  },\n  createMaterial_: function (materialName) {\n    // Create material\n    var scope = this;\n    var mat = this.materialsInfo[materialName];\n    var params = {\n      name: materialName,\n      side: this.side\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n      if (/^https?:\\/\\//i.test(url)) return url;\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      var texParams = scope.getTextureParams(value, params);\n      var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n\n    for (var prop in mat) {\n      var value = mat[prop];\n      var n;\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          params.color = new THREE.Color().fromArray(value);\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new THREE.Color().fromArray(value);\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n          setMapForType(\"map\", value);\n          break;\n\n        case 'map_ks':\n          // Specular map\n          setMapForType(\"specularMap\", value);\n          break;\n\n        case 'norm':\n          setMapForType(\"normalMap\", value);\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n          setMapForType(\"bumpMap\", value);\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n          params.shininess = parseFloat(value);\n          break;\n\n        case 'd':\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'tr':\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n    return this.materials[materialName];\n  },\n  getTextureParams: function (value, matParams) {\n    var texParams = {\n      scale: new THREE.Vector2(1, 1),\n      offset: new THREE.Vector2(0, 0)\n    };\n    var items = value.split(/\\s+/);\n    var pos;\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  },\n  loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n    var texture;\n    var loader = THREE.Loader.Handlers.get(url);\n    var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n\n    if (loader === null) {\n      loader = new THREE.TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== undefined) texture.mapping = mapping;\n    return texture;\n  }\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.OBJLoader = function () {\n  // o object_name | g group_name\n  var object_pattern = /^[og]\\s*(.+)?/; // mtllib file_reference\n\n  var material_library_pattern = /^mtllib /; // usemtl material_name\n\n  var material_use_pattern = /^usemtl /;\n\n  function ParserState() {\n    var state = {\n      objects: [],\n      object: {},\n      vertices: [],\n      normals: [],\n      colors: [],\n      uvs: [],\n      materialLibraries: [],\n      startObject: function (name, fromDeclaration) {\n        // If the current object (initial from reset) is not from a g/o declaration in the parsed\n        // file. We need to use it for the first parsed g/o to keep things in sync.\n        if (this.object && this.object.fromDeclaration === false) {\n          this.object.name = name;\n          this.object.fromDeclaration = fromDeclaration !== false;\n          return;\n        }\n\n        var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n\n        if (this.object && typeof this.object._finalize === 'function') {\n          this.object._finalize(true);\n        }\n\n        this.object = {\n          name: name || '',\n          fromDeclaration: fromDeclaration !== false,\n          geometry: {\n            vertices: [],\n            normals: [],\n            colors: [],\n            uvs: []\n          },\n          materials: [],\n          smooth: true,\n          startMaterial: function (name, libraries) {\n            var previous = this._finalize(false); // New usemtl declaration overwrites an inherited material, except if faces were declared\n            // after the material, then it must be preserved for proper MultiMaterial continuation.\n\n\n            if (previous && (previous.inherited || previous.groupCount <= 0)) {\n              this.materials.splice(previous.index, 1);\n            }\n\n            var material = {\n              index: this.materials.length,\n              name: name || '',\n              mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n              smooth: previous !== undefined ? previous.smooth : this.smooth,\n              groupStart: previous !== undefined ? previous.groupEnd : 0,\n              groupEnd: -1,\n              groupCount: -1,\n              inherited: false,\n              clone: function (index) {\n                var cloned = {\n                  index: typeof index === 'number' ? index : this.index,\n                  name: this.name,\n                  mtllib: this.mtllib,\n                  smooth: this.smooth,\n                  groupStart: 0,\n                  groupEnd: -1,\n                  groupCount: -1,\n                  inherited: false\n                };\n                cloned.clone = this.clone.bind(cloned);\n                return cloned;\n              }\n            };\n            this.materials.push(material);\n            return material;\n          },\n          currentMaterial: function () {\n            if (this.materials.length > 0) {\n              return this.materials[this.materials.length - 1];\n            }\n\n            return undefined;\n          },\n          _finalize: function (end) {\n            var lastMultiMaterial = this.currentMaterial();\n\n            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n              lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n              lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n              lastMultiMaterial.inherited = false;\n            } // Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\n\n            if (end && this.materials.length > 1) {\n              for (var mi = this.materials.length - 1; mi >= 0; mi--) {\n                if (this.materials[mi].groupCount <= 0) {\n                  this.materials.splice(mi, 1);\n                }\n              }\n            } // Guarantee at least one empty material, this makes the creation later more straight forward.\n\n\n            if (end && this.materials.length === 0) {\n              this.materials.push({\n                name: '',\n                smooth: this.smooth\n              });\n            }\n\n            return lastMultiMaterial;\n          }\n        }; // Inherit previous objects material.\n        // Spec tells us that a declared material must be set to all objects until a new material is declared.\n        // If a usemtl declaration is encountered while this new object is being parsed, it will\n        // overwrite the inherited material. Exception being that there was already face declarations\n        // to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n        if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n          var declared = previousMaterial.clone(0);\n          declared.inherited = true;\n          this.object.materials.push(declared);\n        }\n\n        this.objects.push(this.object);\n      },\n      finalize: function () {\n        if (this.object && typeof this.object._finalize === 'function') {\n          this.object._finalize(true);\n        }\n      },\n      parseVertexIndex: function (value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 3) * 3;\n      },\n      parseNormalIndex: function (value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 3) * 3;\n      },\n      parseUVIndex: function (value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 2) * 2;\n      },\n      addVertex: function (a, b, c) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n      addVertexPoint: function (a) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      },\n      addVertexLine: function (a) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      },\n      addNormal: function (a, b, c) {\n        var src = this.normals;\n        var dst = this.object.geometry.normals;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n      addColor: function (a, b, c) {\n        var src = this.colors;\n        var dst = this.object.geometry.colors;\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n      addUV: function (a, b, c) {\n        var src = this.uvs;\n        var dst = this.object.geometry.uvs;\n        dst.push(src[a + 0], src[a + 1]);\n        dst.push(src[b + 0], src[b + 1]);\n        dst.push(src[c + 0], src[c + 1]);\n      },\n      addUVLine: function (a) {\n        var src = this.uvs;\n        var dst = this.object.geometry.uvs;\n        dst.push(src[a + 0], src[a + 1]);\n      },\n      addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n        var vLen = this.vertices.length;\n        var ia = this.parseVertexIndex(a, vLen);\n        var ib = this.parseVertexIndex(b, vLen);\n        var ic = this.parseVertexIndex(c, vLen);\n        this.addVertex(ia, ib, ic);\n\n        if (ua !== undefined && ua !== '') {\n          var uvLen = this.uvs.length;\n          ia = this.parseUVIndex(ua, uvLen);\n          ib = this.parseUVIndex(ub, uvLen);\n          ic = this.parseUVIndex(uc, uvLen);\n          this.addUV(ia, ib, ic);\n        }\n\n        if (na !== undefined && na !== '') {\n          // Normals are many times the same. If so, skip function call and parseInt.\n          var nLen = this.normals.length;\n          ia = this.parseNormalIndex(na, nLen);\n          ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);\n          ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);\n          this.addNormal(ia, ib, ic);\n        }\n\n        if (this.colors.length > 0) {\n          this.addColor(ia, ib, ic);\n        }\n      },\n      addPointGeometry: function (vertices) {\n        this.object.geometry.type = 'Points';\n        var vLen = this.vertices.length;\n\n        for (var vi = 0, l = vertices.length; vi < l; vi++) {\n          this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));\n        }\n      },\n      addLineGeometry: function (vertices, uvs) {\n        this.object.geometry.type = 'Line';\n        var vLen = this.vertices.length;\n        var uvLen = this.uvs.length;\n\n        for (var vi = 0, l = vertices.length; vi < l; vi++) {\n          this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n        }\n\n        for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {\n          this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n        }\n      }\n    };\n    state.startObject('', false);\n    return state;\n  } //\n\n\n  function OBJLoader(manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n    this.materials = null;\n  }\n\n  OBJLoader.prototype = {\n    constructor: OBJLoader,\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new THREE.FileLoader(scope.manager);\n      loader.setPath(this.path);\n      loader.load(url, function (text) {\n        onLoad(scope.parse(text));\n      }, onProgress, onError);\n    },\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n    setMaterials: function (materials) {\n      this.materials = materials;\n      return this;\n    },\n    parse: function (text) {\n      console.time('OBJLoader');\n      var state = new ParserState();\n\n      if (text.indexOf('\\r\\n') !== -1) {\n        // This is faster than String.split with regex that splits on both\n        text = text.replace(/\\r\\n/g, '\\n');\n      }\n\n      if (text.indexOf('\\\\\\n') !== -1) {\n        // join lines separated by a line continuation character (\\)\n        text = text.replace(/\\\\\\n/g, '');\n      }\n\n      var lines = text.split('\\n');\n      var line = '',\n          lineFirstChar = '';\n      var lineLength = 0;\n      var result = []; // Faster to just trim left side of the line. Use if available.\n\n      var trimLeft = typeof ''.trimLeft === 'function';\n\n      for (var i = 0, l = lines.length; i < l; i++) {\n        line = lines[i];\n        line = trimLeft ? line.trimLeft() : line.trim();\n        lineLength = line.length;\n        if (lineLength === 0) continue;\n        lineFirstChar = line.charAt(0); // @todo invoke passed in handler if any\n\n        if (lineFirstChar === '#') continue;\n\n        if (lineFirstChar === 'v') {\n          var data = line.split(/\\s+/);\n\n          switch (data[0]) {\n            case 'v':\n              state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n\n              if (data.length === 8) {\n                state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n              }\n\n              break;\n\n            case 'vn':\n              state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n              break;\n\n            case 'vt':\n              state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n              break;\n          }\n        } else if (lineFirstChar === 'f') {\n          var lineData = line.substr(1).trim();\n          var vertexData = lineData.split(/\\s+/);\n          var faceVertices = []; // Parse the face vertex data into an easy to work with format\n\n          for (var j = 0, jl = vertexData.length; j < jl; j++) {\n            var vertex = vertexData[j];\n\n            if (vertex.length > 0) {\n              var vertexParts = vertex.split('/');\n              faceVertices.push(vertexParts);\n            }\n          } // Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\n          var v1 = faceVertices[0];\n\n          for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n            var v2 = faceVertices[j];\n            var v3 = faceVertices[j + 1];\n            state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n          }\n        } else if (lineFirstChar === 'l') {\n          var lineParts = line.substring(1).trim().split(\" \");\n          var lineVertices = [],\n              lineUVs = [];\n\n          if (line.indexOf(\"/\") === -1) {\n            lineVertices = lineParts;\n          } else {\n            for (var li = 0, llen = lineParts.length; li < llen; li++) {\n              var parts = lineParts[li].split(\"/\");\n              if (parts[0] !== \"\") lineVertices.push(parts[0]);\n              if (parts[1] !== \"\") lineUVs.push(parts[1]);\n            }\n          }\n\n          state.addLineGeometry(lineVertices, lineUVs);\n        } else if (lineFirstChar === 'p') {\n          var lineData = line.substr(1).trim();\n          var pointData = lineData.split(\" \");\n          state.addPointGeometry(pointData);\n        } else if ((result = object_pattern.exec(line)) !== null) {\n          // o object_name\n          // or\n          // g group_name\n          // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n          // var name = result[ 0 ].substr( 1 ).trim();\n          var name = (\" \" + result[0].substr(1).trim()).substr(1);\n          state.startObject(name);\n        } else if (material_use_pattern.test(line)) {\n          // material\n          state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n        } else if (material_library_pattern.test(line)) {\n          // mtl file\n          state.materialLibraries.push(line.substring(7).trim());\n        } else if (lineFirstChar === 's') {\n          result = line.split(' '); // smooth shading\n          // @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n          // but does not define a usemtl for each face set.\n          // This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n          // This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n          // where explicit usemtl defines geometry groups.\n          // Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n          /*\n           * http://paulbourke.net/dataformats/obj/\n           * or\n           * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n           *\n           * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n           * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n           * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n           * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n           * than 0.\"\n           */\n\n          if (result.length > 1) {\n            var value = result[1].trim().toLowerCase();\n            state.object.smooth = value !== '0' && value !== 'off';\n          } else {\n            // ZBrush can produce \"s\" lines #11707\n            state.object.smooth = true;\n          }\n\n          var material = state.object.currentMaterial();\n          if (material) material.smooth = state.object.smooth;\n        } else {\n          // Handle null terminated files without exception\n          if (line === '\\0') continue;\n          throw new Error('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n        }\n      }\n\n      state.finalize();\n      var container = new THREE.Group();\n      container.materialLibraries = [].concat(state.materialLibraries);\n\n      for (var i = 0, l = state.objects.length; i < l; i++) {\n        var object = state.objects[i];\n        var geometry = object.geometry;\n        var materials = object.materials;\n        var isLine = geometry.type === 'Line';\n        var isPoints = geometry.type === 'Points';\n        var hasVertexColors = false; // Skip o/g line declarations that did not follow with any faces\n\n        if (geometry.vertices.length === 0) continue;\n        var buffergeometry = new THREE.BufferGeometry();\n        buffergeometry.addAttribute('position', new THREE.Float32BufferAttribute(geometry.vertices, 3));\n\n        if (geometry.normals.length > 0) {\n          buffergeometry.addAttribute('normal', new THREE.Float32BufferAttribute(geometry.normals, 3));\n        } else {\n          buffergeometry.computeVertexNormals();\n        }\n\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.addAttribute('color', new THREE.Float32BufferAttribute(geometry.colors, 3));\n        }\n\n        if (geometry.uvs.length > 0) {\n          buffergeometry.addAttribute('uv', new THREE.Float32BufferAttribute(geometry.uvs, 2));\n        } // Create materials\n\n\n        var createdMaterials = [];\n\n        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          var sourceMaterial = materials[mi];\n          var material = undefined;\n\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name); // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\n            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {\n              var materialLine = new THREE.LineBasicMaterial();\n              materialLine.copy(material);\n              materialLine.lights = false; // TOFIX\n\n              material = materialLine;\n            } else if (isPoints && material && !(material instanceof THREE.PointsMaterial)) {\n              var materialPoints = new THREE.PointsMaterial({\n                size: 10,\n                sizeAttenuation: false\n              });\n              materialLine.copy(material);\n              material = materialPoints;\n            }\n          }\n\n          if (!material) {\n            if (isLine) {\n              material = new THREE.LineBasicMaterial();\n            } else if (isPoints) {\n              material = new THREE.PointsMaterial({\n                size: 1,\n                sizeAttenuation: false\n              });\n            } else {\n              material = new THREE.MeshPhongMaterial();\n            }\n\n            material.name = sourceMaterial.name;\n          }\n\n          material.flatShading = sourceMaterial.smooth ? false : true;\n          material.vertexColors = hasVertexColors ? THREE.VertexColors : THREE.NoColors;\n          createdMaterials.push(material);\n        } // Create mesh\n\n\n        var mesh;\n\n        if (createdMaterials.length > 1) {\n          for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            var sourceMaterial = materials[mi];\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n          }\n\n          if (isLine) {\n            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new THREE.Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new THREE.Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n\n      console.timeEnd('OBJLoader');\n      return container;\n    }\n  };\n  return OBJLoader;\n}();\n\nexports.MTLLoader = THREE.MTLLoader;\nexports.OBJLoader = THREE.OBJLoader;","map":{"version":3,"sources":["/Users/macdann/Desktop/ethccHack-NFT/Solar-NFT/node_modules/three-obj-mtl-loader/index.js"],"names":["THREE","require","MTLLoader","manager","undefined","DefaultLoadingManager","prototype","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","setTexturePath","texturePath","setBaseUrl","console","warn","setCrossOrigin","value","crossOrigin","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","specular","shininess","opacity","transparent","invertTrProperty","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","Loader","Handlers","get","TextureLoader","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","ParserState","state","objects","object","vertices","normals","colors","uvs","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","geometry","smooth","startMaterial","libraries","previous","inherited","groupCount","material","mtllib","Array","isArray","groupStart","groupEnd","clone","cloned","bind","push","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","len","parseInt","parseNormalIndex","parseUVIndex","addVertex","a","b","c","src","dst","addVertexPoint","addVertexLine","addNormal","addColor","addUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ib","ic","uvLen","nLen","addPointGeometry","type","vi","l","addLineGeometry","uvi","time","replace","lineFirstChar","lineLength","result","trimLeft","data","lineData","substr","vertexData","faceVertices","j","jl","vertex","vertexParts","v1","v2","v3","lineParts","lineVertices","lineUVs","li","llen","parts","pointData","exec","Error","container","Group","concat","isLine","isPoints","hasVertexColors","buffergeometry","BufferGeometry","addAttribute","Float32BufferAttribute","computeVertexNormals","createdMaterials","miLen","sourceMaterial","LineBasicMaterial","materialLine","lights","PointsMaterial","materialPoints","size","sizeAttenuation","flatShading","vertexColors","VertexColors","NoColors","mesh","addGroup","LineSegments","Points","Mesh","add","timeEnd","exports"],"mappings":"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","sourcesContent":["var THREE = require('three')\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nTHREE.MTLLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.MTLLoader.prototype = {\n\n\tconstructor: THREE.MTLLoader,\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setTexturePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setPath and/or setTexturePath explicitly prior to load.\n\t */\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * Set base path for resolving references.\n\t * If set this path will be prepended to each loaded and found reference.\n\t *\n\t * @see setTexturePath\n\t * @param {String} path\n\t * @return {THREE.MTLLoader}\n\t *\n\t * @example\n\t *     mtlLoader.setPath( 'assets/obj/' );\n\t *     mtlLoader.load( 'my.mtl', ... );\n\t */\n\tsetPath: function ( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Set base path for resolving texture references.\n\t * If set this path will be prepended found texture reference.\n\t * If not set and setPath is, it will be used as texture base path.\n\t *\n\t * @see setPath\n\t * @param {String} path\n\t * @return {THREE.MTLLoader}\n\t *\n\t * @example\n\t *     mtlLoader.setPath( 'assets/obj/' );\n\t *     mtlLoader.setTexturePath( 'assets/textures/' );\n\t *     mtlLoader.load( 'my.mtl', ... );\n\t */\n\tsetTexturePath: function ( path ) {\n\n\t\tthis.texturePath = path;\n\t\treturn this;\n\n\t},\n\n\tsetBaseUrl: function ( path ) {\n\n\t\tconsole.warn( 'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.' );\n\n\t\treturn this.setTexturePath( path );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetMaterialOptions: function ( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {THREE.MTLLoader.MaterialCreator}\n\t *\n\t * @see setPath setTexturePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setPath and/or setTexturePath explicitly prior to parse.\n\t */\n\tparse: function ( text ) {\n\n\t\tvar lines = text.split( '\\n' );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else if ( info ) {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.texturePath || this.path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl || '';\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\tcrossOrigin: 'Anonymous',\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetManager: function ( value ) {\n\n\t\tthis.manager = value;\n\n\t},\n\n\tsetMaterials: function ( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function ( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function ( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function () {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar scope = this;\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tvar texParams = scope.getTextureParams( value, params );\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\t\t\tvar n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( \"map\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( \"specularMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( \"normalMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( \"bumpMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tgetTextureParams: function ( value, matParams ) {\n\n\t\tvar texParams = {\n\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\n\t\t\toffset: new THREE.Vector2( 0, 0 )\n\n\t\t };\n\n\t\tvar items = value.split( /\\s+/ );\n\t\tvar pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t},\n\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tvar texture;\n\t\tvar loader = THREE.Loader.Handlers.get( url );\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.OBJLoader = ( function () {\n\n\t// o object_name | g group_name\n\tvar object_pattern = /^[og]\\s*(.+)?/;\n\t// mtllib file_reference\n\tvar material_library_pattern = /^mtllib /;\n\t// usemtl material_name\n\tvar material_use_pattern = /^usemtl /;\n\n\tfunction ParserState() {\n\n\t\tvar state = {\n\t\t\tobjects: [],\n\t\t\tobject: {},\n\n\t\t\tvertices: [],\n\t\t\tnormals: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\n\t\t\tmaterialLibraries: [],\n\n\t\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\t\tthis.object.name = name;\n\t\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t\tthis.object = {\n\t\t\t\t\tname: name || '',\n\t\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\t\tgeometry: {\n\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\tcolors: [],\n\t\t\t\t\t\tuvs: []\n\t\t\t\t\t},\n\t\t\t\t\tmaterials: [],\n\t\t\t\t\tsmooth: true,\n\n\t\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\t\tvar previous = this._finalize( false );\n\n\t\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = {\n\t\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\t\tvar cloned = {\n\t\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\t\treturn material;\n\n\t\t\t\t\t},\n\n\t\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\n\t\t\t\t\t},\n\n\t\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\t\tvar lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\t\tfor ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Inherit previous objects material.\n\t\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\t\tvar declared = previousMaterial.clone( 0 );\n\t\t\t\t\tdeclared.inherited = true;\n\t\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t\t}\n\n\t\t\t\tthis.objects.push( this.object );\n\n\t\t\t},\n\n\t\t\tfinalize: function () {\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t\t},\n\n\t\t\taddVertex: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexPoint: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexLine: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddNormal: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.normals;\n\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddColor: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.colors;\n\t\t\t\tvar dst = this.object.geometry.colors;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddUV: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t\t},\n\n\t\t\taddUVLine: function ( a ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t\t},\n\n\t\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tvar ia = this.parseVertexIndex( a, vLen );\n\t\t\t\tvar ib = this.parseVertexIndex( b, vLen );\n\t\t\t\tvar ic = this.parseVertexIndex( c, vLen );\n\n\t\t\t\tthis.addVertex( ia, ib, ic );\n\n\t\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\t\tvar uvLen = this.uvs.length;\n\t\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\t\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\t\t// Normals are many times the same. If so, skip function call and parseInt.\n\t\t\t\t\tvar nLen = this.normals.length;\n\t\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\n\t\t\t\t\tib = na === nb ? ia : this.parseNormalIndex( nb, nLen );\n\t\t\t\t\tic = na === nc ? ia : this.parseNormalIndex( nc, nLen );\n\n\t\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.colors.length > 0 ) {\n\n\t\t\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexPoint( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tstate.startObject( '', false );\n\n\t\treturn state;\n\n\t}\n\n\t//\n\n\tfunction OBJLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t\tthis.materials = null;\n\n\t}\n\n\tOBJLoader.prototype = {\n\n\t\tconstructor: OBJLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMaterials: function ( materials ) {\n\n\t\t\tthis.materials = materials;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tconsole.time( 'OBJLoader' );\n\n\t\t\tvar state = new ParserState();\n\n\t\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t\t}\n\n\t\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t\t}\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar line = '', lineFirstChar = '';\n\t\t\tvar lineLength = 0;\n\t\t\tvar result = [];\n\n\t\t\t// Faster to just trim left side of the line. Use if available.\n\t\t\tvar trimLeft = ( typeof ''.trimLeft === 'function' );\n\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tline = lines[ i ];\n\n\t\t\t\tline = trimLeft ? line.trimLeft() : line.trim();\n\n\t\t\t\tlineLength = line.length;\n\n\t\t\t\tif ( lineLength === 0 ) continue;\n\n\t\t\t\tlineFirstChar = line.charAt( 0 );\n\n\t\t\t\t// @todo invoke passed in handler if any\n\t\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\t\tvar data = line.split( /\\s+/ );\n\n\t\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( data.length === 8 ) {\n\n\t\t\t\t\t\t\t\tstate.colors.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar vertexData = lineData.split( /\\s+/ );\n\t\t\t\t\tvar faceVertices = [];\n\n\t\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\t\tfor ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertexData[ j ];\n\n\t\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\t\tvar vertexParts = vertex.split( '/' );\n\t\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\t\tvar v1 = faceVertices[ 0 ];\n\n\t\t\t\t\tfor ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar v2 = faceVertices[ j ];\n\t\t\t\t\t\tvar v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\t\tvar lineParts = line.substring( 1 ).trim().split( \" \" );\n\t\t\t\t\tvar lineVertices = [], lineUVs = [];\n\n\t\t\t\t\tif ( line.indexOf( \"/\" ) === - 1 ) {\n\n\t\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\t\tvar parts = lineParts[ li ].split( \"/\" );\n\n\t\t\t\t\t\t\tif ( parts[ 0 ] !== \"\" ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\t\tif ( parts[ 1 ] !== \"\" ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar pointData = lineData.split( \" \" );\n\n\t\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// o object_name\n\t\t\t\t\t// or\n\t\t\t\t\t// g group_name\n\n\t\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t\t// var name = result[ 0 ].substr( 1 ).trim();\n\t\t\t\t\tvar name = ( \" \" + result[ 0 ].substr( 1 ).trim() ).substr( 1 );\n\n\t\t\t\t\tstate.startObject( name );\n\n\t\t\t\t} else if ( material_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t\t} else if ( material_library_pattern.test( line ) ) {\n\n\t\t\t\t\t// mtl file\n\n\t\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t\t// smooth shading\n\n\t\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t * or\n\t\t\t\t\t * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\t\tvar value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar material = state.object.currentMaterial();\n\t\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Handle null terminated files without exception\n\t\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\t\tthrow new Error( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.finalize();\n\n\t\t\tvar container = new THREE.Group();\n\t\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\t\tfor ( var i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\tvar object = state.objects[ i ];\n\t\t\t\tvar geometry = object.geometry;\n\t\t\t\tvar materials = object.materials;\n\t\t\t\tvar isLine = ( geometry.type === 'Line' );\n\t\t\t\tvar isPoints = ( geometry.type === 'Points' );\n\t\t\t\tvar hasVertexColors = false;\n\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\tvar buffergeometry = new THREE.BufferGeometry();\n\n\t\t\t\tbuffergeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuffergeometry.computeVertexNormals();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\tbuffergeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Create materials\n\n\t\t\t\tvar createdMaterials = [];\n\n\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\tvar material = undefined;\n\n\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof THREE.LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialLine = new THREE.LineBasicMaterial();\n\t\t\t\t\t\t\tmaterialLine.copy( material );\n\t\t\t\t\t\t\tmaterialLine.lights = false; // TOFIX\n\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof THREE.PointsMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialPoints = new THREE.PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\tmaterialLine.copy( material );\n\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! material ) {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmaterial = new THREE.LineBasicMaterial();\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmaterial = new THREE.PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\tmaterial.vertexColors = hasVertexColors ? THREE.VertexColors : THREE.NoColors;\n\n\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\t// Create mesh\n\n\t\t\t\tvar mesh;\n\n\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new THREE.Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new THREE.Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new THREE.Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new THREE.Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t\tconsole.timeEnd( 'OBJLoader' );\n\n\t\t\treturn container;\n\n\t\t}\n\n\t};\n\n\treturn OBJLoader;\n\n} )();\n\nexports.MTLLoader = THREE.MTLLoader;\nexports.OBJLoader = THREE.OBJLoader;\n"]},"metadata":{},"sourceType":"script"}