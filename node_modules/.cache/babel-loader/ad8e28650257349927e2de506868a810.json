{"ast":null,"code":"var _jsxFileName = \"/Users/macdann/Desktop/ethccHack-NFT/Solar-NFT/src/Pages/ThreeScene.js\";\nimport React, { Component, useLayoutEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport LendingPopup from \"../Component/LendingPopup\";\nimport NFTLoader from \"../Component/NFTLoader\";\nimport axios from 'axios';\nimport querystring from 'querystring';\nimport dotenv from 'dotenv';\nimport { NFTStorage, File } from 'nft.storage';\nimport NFTPlanet from '../contracts/NFTplanet.json';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport BlockchainContext from \"../context/BlockchainContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ThreeScene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateDimensions = () => {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    this.closePopup = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.closeLoader = () => {\n      this.setState({\n        showNFTLoader: false\n      });\n    };\n\n    this.addPlanet = planet => {\n      this.planetArray.push(planet);\n      this.setState({\n        planets: planet\n      }, () => {\n        console.log(this.state.planets);\n      });\n    };\n\n    this.getXYPosition = planet => {\n      return {\n        positionX: planet.radius * Math.cos(planet.angle),\n        positionZ: planet.radius * Math.sin(planet.angle)\n      };\n    };\n\n    this.getRandomLogInt = (min, max) => {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return 100 * Math.log(Math.floor(Math.random() * (max - min + 1)) + min);\n    };\n\n    this.createNFTPlanet = async (NFTName, NFTDescription, NFTFile) => {\n      dotenv.config(); //const apiKey = process.env.API_NFT_STORAGE_KEY;\n\n      const apiKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDIwODZiMDI0NjZEQTQwQjBFNDEyOGM0NTdCMDFDYzZDMzhhYUZhZEIiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYyNzE1NzExMjE5MCwibmFtZSI6IlBsYW5ldE5GVCJ9.wVX9L6uGGTRxxGg7jneXUYgd0Q8lveKFXnWCUo0tvkc\";\n      const client = new NFTStorage({\n        token: apiKey\n      });\n      const metadata = await client.store({\n        name: NFTName,\n        description: NFTDescription,\n        image: NFTFile\n      });\n      console.log(metadata.url);\n      const mintedPlanet = this.state.contract.methods.mintPlanet(metadata.url, NFTName).send({\n        from: this.state.accounts[0],\n        value: 0.01 * 10 ** 18\n      }).then(res => {\n        console.log('Success', res);\n        alert(`You have successfully created an new NFT!`);\n        const IDPlanet = res.events.NewPlanet.returnValues.id;\n        console.log(IDPlanet);\n        return IDPlanet;\n      }).catch(err => console.log(err));\n      console.log(mintedPlanet);\n    };\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      for (let i = 0; i < this.planetArray.length; i++) {\n        this.planetArray[i].angle = this.planetArray[i].angle > 360 ? 0 : this.planetArray[i].angle + this.planetArray[i].radius / 100000;\n        this.planetArray[i].mesh.position.x = this.getXYPosition(this.planetArray[i]).positionX;\n        this.planetArray[i].mesh.position.z = this.getXYPosition(this.planetArray[i]).positionZ;\n      }\n\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.queryGraph = () => {\n      const APIURL = \"https://gateway.thegraph.com/api/<API_KEY>/subgraphs/id/<SUBGRAPH_ID>\\nx\";\n      const tokensQuery = `\n  query {\n    tokens {\n      id\n      tokenID\n      contentURI\n      metadataURI\n    }\n  }\n`;\n      const client = new ApolloClient({\n        uri: APIURL,\n        cache: new InMemoryCache()\n      });\n      client.query({\n        query: gql(tokensQuery)\n      }).then(data => console.log(\"Subgraph data: \", data)).catch(err => {\n        console.log(\"Error fetching data: \", err);\n      });\n    };\n\n    this.renderScene = () => {\n      // update the picking ray with the camera and mouse position\n      this.state.raycaster.setFromCamera(this.mouse, this.camera); // calculate objects intersecting the picking ray\n\n      const intersects = this.state.raycaster.intersectObjects(this.scene.children);\n\n      if (intersects.length > 0) {\n        intersects[0].object.material.color.set(0xff0000);\n        this.setState({\n          intersected: intersects[0].object\n        });\n      }\n      /* if ( intersects.length > 0) {\n          intersects[0].object.material.color.set(0xff0000);\n         this.intersected = intersects[0].object;\n       } else {\n         if (this.intersected !== null) {\n           this.intersected.material.color.set(0x6ab056);\n         }\n         this.intersected = null;\n       }*/\n\n\n      if (this.renderer) this.renderer.render(this.scene, this.camera);\n    };\n\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      planets: [],\n      raycaster: new THREE.Raycaster(),\n      intersected: null,\n      isSelected: false,\n      balance: 0,\n      accounts: null,\n      showPopup: false,\n      showNFTLoader: true,\n      contract: null\n    };\n    this.planetArray = [];\n    this.mouse = new THREE.Vector2();\n    this.intersected = null;\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.getXYPosition = this.getXYPosition.bind(this);\n    this.getRandomLogInt = this.getRandomLogInt.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseClick = this.onMouseClick.bind(this);\n    this.start = this.start.bind(this);\n    this.closePopup = this.closePopup.bind(this);\n    this.closeLoader = this.closeLoader.bind(this);\n    this.createNFTPlanet = this.createNFTPlanet.bind(this);\n    this.queryGraph = this.queryGraph.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({\n      contract: this.context.instance\n    });\n    this.setState({\n      accounts: await this.context.accountsPromise\n    });\n    const width = this.state.width;\n    const height = this.state.height;\n    this.scene = new THREE.Scene();\n    this.setState({\n      mouse: new THREE.Vector2()\n    }); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setClearColor(\"#263238\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 98;\n    this.camera.position.y = 62; //Camera Controls\n\n    const controls = new OrbitControls(this.camera, this.renderer.domElement); //LIGHTS\n\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]); //ADD Your 3D Models here\n\n    const cubeGeometry = new THREE.SphereGeometry(3);\n    const material = new THREE.MeshBasicMaterial({\n      color: '#6ab056',\n      wireframe: true\n    });\n    this.cubeMesh = new THREE.Mesh(cubeGeometry, material);\n    this.cubeMesh.position.x = 36;\n    this.cubeMesh.position.y = 0;\n    this.scene.add(this.cubeMesh);\n    const loader = new THREE.FontLoader();\n    loader.load('fonts/helvetiker_regular.typeface.json', function (font) {\n      const geometryText = new THREE.TextGeometry('Hello three.js!', {\n        font: font,\n        size: 8000,\n        height: 5,\n        curveSegments: 12,\n        bevelEnabled: true,\n        bevelThickness: 10,\n        bevelSize: 8,\n        bevelOffset: 0,\n        bevelSegments: 5\n      });\n      const materialText = new THREE.MeshBasicMaterial({\n        color: '#6ab056'\n      });\n      let textMesh = new THREE.Mesh(geometryText, materialText);\n      textMesh.position.y = 0;\n      textMesh.position.x = 0;\n      textMesh.position.z = 10;\n      this.scene.add(textMesh);\n    });\n\n    for (let i = 2; i < 6; i++) {\n      const curve = new THREE.EllipseCurve(0, 0, // ax, aY\n      100 * Math.log(i), 100 * Math.log(i), // xRadius, yRadius\n      0, 2 * Math.PI, // aStartAngle, aEndAngle\n      false, // aClockwise\n      0 // aRotation\n      );\n      const points = curve.getPoints(128);\n      const geometry3 = new THREE.BufferGeometry().setFromPoints(points);\n      geometry3.rotateX(-Math.PI / 2);\n      const material3 = new THREE.LineBasicMaterial({\n        color: 0xCC0000\n      });\n      const ellipse = new THREE.Line(geometry3, material3);\n      this.scene.add(ellipse);\n    }\n\n    for (let i = 0; i < 100; i++) {\n      let radius = this.getRandomLogInt(2, 5);\n      this.createSphere(radius);\n    }\n\n    this.renderScene(); //start animation\n\n    this.start();\n    window.addEventListener('resize', this.updateDimensions);\n    window.addEventListener('mousemove', this.onMouseMove, false);\n    window.addEventListener('click', this.onMouseClick, false);\n    this.setState({\n      showPopup: true\n    });\n  }\n\n  createSphere(radius) {\n    const cubeGeometry = new THREE.SphereBufferGeometry(3, 16, 16);\n    const material = new THREE.MeshBasicMaterial({\n      color: '#6ab056',\n      wireframe: true\n    });\n    let cubeMesh = new THREE.Mesh(cubeGeometry, material);\n    let planet = {\n      radius: radius,\n      angle: Math.random() * 360\n    };\n    const posXY = this.getXYPosition(planet);\n    cubeMesh.position.x = posXY.positionX;\n    cubeMesh.position.z = posXY.positionZ;\n    cubeMesh.position.y = 0;\n    planet.mesh = cubeMesh;\n    this.addPlanet(planet);\n    cubeMesh.rotation.x = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.y = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.z = Math.random() * 2 * Math.PI;\n    const scale = Math.random() + 0.5;\n    cubeMesh.scale.x = scale;\n    cubeMesh.scale.y = scale;\n    cubeMesh.scale.z = scale;\n    cubeMesh.rotation.x = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.y = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.z = Math.random() * 2 * Math.PI;\n    this.scene.add(cubeMesh);\n  }\n\n  onMouseMove(event) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    let mouse = this.mouse;\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    if (this.state.intersected !== null) this.state.intersected.material.color.set(0x6ab056);\n    this.setState({\n      mouse: mouse,\n      intersected: null\n    });\n  }\n\n  onMouseClick(event) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    let mouse = this.mouse;\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    this.setState({\n      mouse: mouse\n    });\n\n    if (this.state.intersected !== null) {\n      this.setState({\n        isSelected: true\n      }, () => {\n        console.log(this.state.isSelected);\n        this.setState({\n          showPopup: true\n        });\n        console.log(`is showpopup : ${this.state.showPopup}`);\n      });\n    } else {\n      this.setState({\n        isSelected: false\n      }, () => {\n        console.log(this.state.isSelected);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 13\n      }, this), this.state.showPopup ? /*#__PURE__*/_jsxDEV(LendingPopup, {\n        handleLend: this.handleLend,\n        closePopup: this.closePopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 17\n      }, this) : null, this.state.showNFTLoader ? /*#__PURE__*/_jsxDEV(NFTLoader, {\n        createNFTPlanet: this.createNFTPlanet,\n        closeLoader: this.closeLoader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nThreeScene.contextType = BlockchainContext;\nexport default ThreeScene;","map":{"version":3,"sources":["/Users/macdann/Desktop/ethccHack-NFT/Solar-NFT/src/Pages/ThreeScene.js"],"names":["React","Component","useLayoutEffect","THREE","MTLLoader","OBJLoader","OrbitControls","Nav","Navbar","LendingPopup","NFTLoader","axios","querystring","dotenv","NFTStorage","File","NFTPlanet","ApolloClient","InMemoryCache","gql","BlockchainContext","ThreeScene","constructor","props","updateDimensions","setState","width","window","innerWidth","height","innerHeight","closePopup","showPopup","closeLoader","showNFTLoader","addPlanet","planet","planetArray","push","planets","console","log","state","getXYPosition","positionX","radius","Math","cos","angle","positionZ","sin","getRandomLogInt","min","max","ceil","floor","random","createNFTPlanet","NFTName","NFTDescription","NFTFile","config","apiKey","client","token","metadata","store","name","description","image","url","mintedPlanet","contract","methods","mintPlanet","send","from","accounts","value","then","res","alert","IDPlanet","events","NewPlanet","returnValues","id","catch","err","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","i","length","mesh","position","x","z","renderScene","queryGraph","APIURL","tokensQuery","uri","cache","query","data","raycaster","setFromCamera","mouse","camera","intersects","intersectObjects","scene","children","object","material","color","set","intersected","renderer","render","Raycaster","isSelected","balance","Vector2","bind","onMouseMove","onMouseClick","componentDidMount","context","instance","accountsPromise","Scene","WebGLRenderer","antialias","setClearColor","setSize","mount","appendChild","domElement","PerspectiveCamera","y","controls","lights","PointLight","add","cubeGeometry","SphereGeometry","MeshBasicMaterial","wireframe","cubeMesh","Mesh","loader","FontLoader","load","font","geometryText","TextGeometry","size","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","materialText","textMesh","curve","EllipseCurve","PI","points","getPoints","geometry3","BufferGeometry","setFromPoints","rotateX","material3","LineBasicMaterial","ellipse","Line","createSphere","addEventListener","SphereBufferGeometry","posXY","rotation","scale","event","clientX","clientY","handleLend","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,eAA1B,QAAgD,OAAhD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,sBAArC;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,SAAQC,GAAR,EAAaC,MAAb,QAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,aAAjC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;;;AAGA,MAAMC,UAAN,SAAyBpB,SAAzB,CAAmC;AAEjCqB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAkCnBC,gBAlCmB,GAkCA,MAAM;AACvB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAEC,MAAM,CAACC,UAAhB;AAA4BC,QAAAA,MAAM,EAAEF,MAAM,CAACG;AAA3C,OAAd;AACD,KApCkB;;AAAA,SAsCnBC,UAtCmB,GAsCR,MAAK;AACd,WAAKN,QAAL,CAAc;AACZO,QAAAA,SAAS,EAAE;AADC,OAAd;AAGD,KA1CkB;;AAAA,SA4CnBC,WA5CmB,GA4CP,MAAK;AACf,WAAKR,QAAL,CAAc;AACZS,QAAAA,aAAa,EAAE;AADH,OAAd;AAGD,KAhDkB;;AAAA,SA2LnBC,SA3LmB,GA2LNC,MAAD,IAAY;AACtB,WAAKC,WAAL,CAAiBC,IAAjB,CAAsBF,MAAtB;AACA,WAAKX,QAAL,CAAc;AAACc,QAAAA,OAAO,EAAEH;AAAV,OAAd,EAAiC,MAAM;AACrCI,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWH,OAAvB;AACD,OAFD;AAGD,KAhMkB;;AAAA,SAkMnBI,aAlMmB,GAkMFP,MAAD,IAAY;AAC1B,aAAO;AACLQ,QAAAA,SAAS,EAAER,MAAM,CAACS,MAAP,GAAcC,IAAI,CAACC,GAAL,CAASX,MAAM,CAACY,KAAhB,CADpB;AAELC,QAAAA,SAAS,EAAEb,MAAM,CAACS,MAAP,GAAcC,IAAI,CAACI,GAAL,CAASd,MAAM,CAACY,KAAhB;AAFpB,OAAP;AAID,KAvMkB;;AAAA,SAyMnBG,eAzMmB,GAyMD,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC9BD,MAAAA,GAAG,GAAGN,IAAI,CAACQ,IAAL,CAAUF,GAAV,CAAN;AACAC,MAAAA,GAAG,GAAGP,IAAI,CAACS,KAAL,CAAWF,GAAX,CAAN;AACA,aAAO,MAAIP,IAAI,CAACL,GAAL,CAASK,IAAI,CAACS,KAAL,CAAWT,IAAI,CAACU,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAAvD,CAAX;AACD,KA7MkB;;AAAA,SA+MnBK,eA/MmB,GA+MD,OAAOC,OAAP,EAAgBC,cAAhB,EAAgCC,OAAhC,KAA4C;AAE5D/C,MAAAA,MAAM,CAACgD,MAAP,GAF4D,CAG5D;;AACA,YAAMC,MAAM,GAAG,mPAAf;AACA,YAAMC,MAAM,GAAG,IAAIjD,UAAJ,CAAe;AAACkD,QAAAA,KAAK,EAAEF;AAAR,OAAf,CAAf;AAEA,YAAMG,QAAQ,GAAG,MAAMF,MAAM,CAACG,KAAP,CAAa;AAClCC,QAAAA,IAAI,EAAET,OAD4B;AAElCU,QAAAA,WAAW,EAAET,cAFqB;AAGlCU,QAAAA,KAAK,EAAET;AAH2B,OAAb,CAAvB;AAKApB,MAAAA,OAAO,CAACC,GAAR,CAAYwB,QAAQ,CAACK,GAArB;AAEA,YAAMC,YAAY,GAAG,KAAK7B,KAAL,CAAW8B,QAAX,CAAoBC,OAApB,CAA4BC,UAA5B,CAAuCT,QAAQ,CAACK,GAAhD,EAAqDZ,OAArD,EAChBiB,IADgB,CACX;AAACC,QAAAA,IAAI,EAAE,KAAKlC,KAAL,CAAWmC,QAAX,CAAoB,CAApB,CAAP;AAA+BC,QAAAA,KAAK,EAAE,OAAK,MAAI;AAA/C,OADW,EAEhBC,IAFgB,CAEXC,GAAG,IAAI;AACXxC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBuC,GAAvB;AACAC,QAAAA,KAAK,CAAE,2CAAF,CAAL;AACA,cAAMC,QAAQ,GAAGF,GAAG,CAACG,MAAJ,CAAWC,SAAX,CAAqBC,YAArB,CAAkCC,EAAnD;AACA9C,QAAAA,OAAO,CAACC,GAAR,CAAYyC,QAAZ;AACA,eAAOA,QAAP;AACD,OARgB,EAShBK,KATgB,CASVC,GAAG,IAAIhD,OAAO,CAACC,GAAR,CAAY+C,GAAZ,CATG,CAArB;AAWAhD,MAAAA,OAAO,CAACC,GAAR,CAAY8B,YAAZ;AACD,KAzOkB;;AAAA,SAiRnBkB,KAjRmB,GAiRX,MAAM;AACZ,UAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,aAAKA,OAAL,GAAeC,qBAAqB,CAAC,KAAKC,OAAN,CAApC;AACD;AACF,KArRkB;;AAAA,SAsRnBC,IAtRmB,GAsRZ,MAAM;AACXC,MAAAA,oBAAoB,CAAC,KAAKJ,OAAN,CAApB;AACD,KAxRkB;;AAAA,SAyRnBE,OAzRmB,GAyRT,MAAM;AACd,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1D,WAAL,CAAiB2D,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAEhD,aAAK1D,WAAL,CAAiB0D,CAAjB,EAAoB/C,KAApB,GAA6B,KAAKX,WAAL,CAAiB0D,CAAjB,EAAoB/C,KAApB,GAA4B,GAA7B,GAAoC,CAApC,GAAwC,KAAKX,WAAL,CAAiB0D,CAAjB,EAAoB/C,KAApB,GAA4B,KAAKX,WAAL,CAAiB0D,CAAjB,EAAoBlD,MAApB,GAA2B,MAA3H;AACA,aAAKR,WAAL,CAAiB0D,CAAjB,EAAoBE,IAApB,CAAyBC,QAAzB,CAAkCC,CAAlC,GAAsC,KAAKxD,aAAL,CAAmB,KAAKN,WAAL,CAAiB0D,CAAjB,CAAnB,EAAwCnD,SAA9E;AACA,aAAKP,WAAL,CAAiB0D,CAAjB,EAAoBE,IAApB,CAAyBC,QAAzB,CAAkCE,CAAlC,GAAsC,KAAKzD,aAAL,CAAmB,KAAKN,WAAL,CAAiB0D,CAAjB,CAAnB,EAAwC9C,SAA9E;AACD;;AAED,WAAKoD,WAAL;AACA,WAAKX,OAAL,GAAe/D,MAAM,CAACgE,qBAAP,CAA6B,KAAKC,OAAlC,CAAf;AAED,KApSkB;;AAAA,SAuSnBU,UAvSmB,GAuSN,MAAM;AACjB,YAAMC,MAAM,GAAG,0EAAf;AAEA,YAAMC,WAAW,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATI;AAWA,YAAMzC,MAAM,GAAG,IAAI9C,YAAJ,CAAiB;AAC9BwF,QAAAA,GAAG,EAAEF,MADyB;AAE9BG,QAAAA,KAAK,EAAE,IAAIxF,aAAJ;AAFuB,OAAjB,CAAf;AAKA6C,MAAAA,MAAM,CAAC4C,KAAP,CAAa;AACXA,QAAAA,KAAK,EAAExF,GAAG,CAACqF,WAAD;AADC,OAAb,EAGKzB,IAHL,CAGU6B,IAAI,IAAIpE,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BmE,IAA/B,CAHlB,EAIKrB,KAJL,CAIWC,GAAG,IAAI;AAAEhD,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqC+C,GAArC;AAA2C,OAJ/D;AAKD,KA/TkB;;AAAA,SAiUnBa,WAjUmB,GAiUL,MAAM;AAChB;AACF,WAAK3D,KAAL,CAAWmE,SAAX,CAAqBC,aAArB,CAAoC,KAAKC,KAAzC,EAAgD,KAAKC,MAArD,EAFkB,CAIlB;;AACA,YAAMC,UAAU,GAAG,KAAKvE,KAAL,CAAWmE,SAAX,CAAqBK,gBAArB,CAAuC,KAAKC,KAAL,CAAWC,QAAlD,CAAnB;;AAEA,UAAKH,UAAU,CAACjB,MAAX,GAAoB,CAAzB,EAA4B;AAE1BiB,QAAAA,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,CAAqBC,QAArB,CAA8BC,KAA9B,CAAoCC,GAApC,CAAwC,QAAxC;AACA,aAAK/F,QAAL,CAAc;AAACgG,UAAAA,WAAW,EAAER,UAAU,CAAC,CAAD,CAAV,CAAcI;AAA5B,SAAd;AACD;AACF;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGI,UAAI,KAAKK,QAAT,EAAmB,KAAKA,QAAL,CAAcC,MAAd,CAAqB,KAAKR,KAA1B,EAAiC,KAAKH,MAAtC;AAEpB,KA1VkB;;AAGjB,SAAKtE,KAAL,GAAa;AACXhB,MAAAA,KAAK,EAAEC,MAAM,CAACC,UADH;AAEXC,MAAAA,MAAM,EAAEF,MAAM,CAACG,WAFJ;AAGXS,MAAAA,OAAO,EAAE,EAHE;AAIXsE,MAAAA,SAAS,EAAE,IAAI1G,KAAK,CAACyH,SAAV,EAJA;AAKXH,MAAAA,WAAW,EAAE,IALF;AAMXI,MAAAA,UAAU,EAAE,KAND;AAOXC,MAAAA,OAAO,EAAE,CAPE;AAQXjD,MAAAA,QAAQ,EAAE,IARC;AASX7C,MAAAA,SAAS,EAAE,KATA;AAUXE,MAAAA,aAAa,EAAE,IAVJ;AAWXsC,MAAAA,QAAQ,EAAE;AAXC,KAAb;AAcA,SAAKnC,WAAL,GAAmB,EAAnB;AAEA,SAAK0E,KAAL,GAAa,IAAI5G,KAAK,CAAC4H,OAAV,EAAb;AACA,SAAKN,WAAL,GAAmB,IAAnB;AAEA,SAAKjG,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBwG,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKrF,aAAL,GAAqB,KAAKA,aAAL,CAAmBqF,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAK7E,eAAL,GAAuB,KAAKA,eAAL,CAAqB6E,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKvC,KAAL,GAAa,KAAKA,KAAL,CAAWuC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKjG,UAAL,GAAkB,KAAKA,UAAL,CAAgBiG,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAK/F,WAAL,GAAmB,KAAKA,WAAL,CAAiB+F,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKvE,eAAL,GAAuB,KAAKA,eAAL,CAAqBuE,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAK1B,UAAL,GAAkB,KAAKA,UAAL,CAAgB0B,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAkBsB,QAAjBG,iBAAiB,GAAG;AAExB,SAAK1G,QAAL,CAAc;AAAC+C,MAAAA,QAAQ,EAAE,KAAK4D,OAAL,CAAaC;AAAxB,KAAd;AACA,SAAK5G,QAAL,CAAc;AAACoD,MAAAA,QAAQ,EAAE,MAAM,KAAKuD,OAAL,CAAaE;AAA9B,KAAd;AAEA,UAAM5G,KAAK,GAAG,KAAKgB,KAAL,CAAWhB,KAAzB;AACA,UAAMG,MAAM,GAAG,KAAKa,KAAL,CAAWb,MAA1B;AACA,SAAKsF,KAAL,GAAa,IAAIhH,KAAK,CAACoI,KAAV,EAAb;AACA,SAAK9G,QAAL,CAAc;AAACsF,MAAAA,KAAK,EAAE,IAAI5G,KAAK,CAAC4H,OAAV;AAAR,KAAd,EARwB,CASxB;;AACA,SAAKL,QAAL,GAAgB,IAAIvH,KAAK,CAACqI,aAAV,CAAwB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAxB,CAAhB;AACA,SAAKf,QAAL,CAAcgB,aAAd,CAA4B,SAA5B;AACA,SAAKhB,QAAL,CAAciB,OAAd,CAAsBjH,KAAtB,EAA6BG,MAA7B;AACA,SAAK+G,KAAL,CAAWC,WAAX,CAAuB,KAAKnB,QAAL,CAAcoB,UAArC,EAbwB,CAcxB;;AACA,SAAK9B,MAAL,GAAc,IAAI7G,KAAK,CAAC4I,iBAAV,CAA4B,EAA5B,EAAgCrH,KAAK,GAAGG,MAAxC,EAAgD,GAAhD,EAAqD,IAArD,CAAd;AACA,SAAKmF,MAAL,CAAYd,QAAZ,CAAqBE,CAArB,GAAyB,EAAzB;AACA,SAAKY,MAAL,CAAYd,QAAZ,CAAqB8C,CAArB,GAAyB,EAAzB,CAjBwB,CAkBxB;;AACA,UAAMC,QAAQ,GAAG,IAAI3I,aAAJ,CAAkB,KAAK0G,MAAvB,EAA+B,KAAKU,QAAL,CAAcoB,UAA7C,CAAjB,CAnBwB,CAoBxB;;AACA,QAAII,MAAM,GAAG,EAAb;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,IAAI/I,KAAK,CAACgJ,UAAV,CAAqB,QAArB,EAA+B,CAA/B,EAAkC,CAAlC,CAAZ;AACAD,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,IAAI/I,KAAK,CAACgJ,UAAV,CAAqB,QAArB,EAA+B,CAA/B,EAAkC,CAAlC,CAAZ;AACAD,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,IAAI/I,KAAK,CAACgJ,UAAV,CAAqB,QAArB,EAA+B,CAA/B,EAAkC,CAAlC,CAAZ;AACAD,IAAAA,MAAM,CAAC,CAAD,CAAN,CAAUhD,QAAV,CAAmBsB,GAAnB,CAAuB,CAAvB,EAA0B,GAA1B,EAA+B,CAA/B;AACA0B,IAAAA,MAAM,CAAC,CAAD,CAAN,CAAUhD,QAAV,CAAmBsB,GAAnB,CAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC;AACA0B,IAAAA,MAAM,CAAC,CAAD,CAAN,CAAUhD,QAAV,CAAmBsB,GAAnB,CAAuB,CAAC,GAAxB,EAA6B,CAAC,GAA9B,EAAmC,CAAC,GAApC;AACA,SAAKL,KAAL,CAAWiC,GAAX,CAAeF,MAAM,CAAC,CAAD,CAArB;AACA,SAAK/B,KAAL,CAAWiC,GAAX,CAAeF,MAAM,CAAC,CAAD,CAArB;AACA,SAAK/B,KAAL,CAAWiC,GAAX,CAAeF,MAAM,CAAC,CAAD,CAArB,EA9BwB,CAgCxB;;AACA,UAAMG,YAAY,GAAG,IAAIlJ,KAAK,CAACmJ,cAAV,CAAyB,CAAzB,CAArB;AACA,UAAMhC,QAAQ,GAAG,IAAInH,KAAK,CAACoJ,iBAAV,CAA4B;AAC3ChC,MAAAA,KAAK,EAAE,SADoC;AAE3CiC,MAAAA,SAAS,EAAE;AAFgC,KAA5B,CAAjB;AAIA,SAAKC,QAAL,GAAgB,IAAItJ,KAAK,CAACuJ,IAAV,CAAeL,YAAf,EAA6B/B,QAA7B,CAAhB;AACA,SAAKmC,QAAL,CAAcvD,QAAd,CAAuBC,CAAvB,GAA2B,EAA3B;AACA,SAAKsD,QAAL,CAAcvD,QAAd,CAAuB8C,CAAvB,GAA2B,CAA3B;AACA,SAAK7B,KAAL,CAAWiC,GAAX,CAAe,KAAKK,QAApB;AAGA,UAAME,MAAM,GAAG,IAAIxJ,KAAK,CAACyJ,UAAV,EAAf;AACAD,IAAAA,MAAM,CAACE,IAAP,CAAa,wCAAb,EAAuD,UAAWC,IAAX,EAAkB;AAEvE,YAAMC,YAAY,GAAG,IAAI5J,KAAK,CAAC6J,YAAV,CAAwB,iBAAxB,EAA2C;AAC9DF,QAAAA,IAAI,EAAEA,IADwD;AAE9DG,QAAAA,IAAI,EAAE,IAFwD;AAG9DpI,QAAAA,MAAM,EAAE,CAHsD;AAI9DqI,QAAAA,aAAa,EAAE,EAJ+C;AAK9DC,QAAAA,YAAY,EAAE,IALgD;AAM9DC,QAAAA,cAAc,EAAE,EAN8C;AAO9DC,QAAAA,SAAS,EAAE,CAPmD;AAQ9DC,QAAAA,WAAW,EAAE,CARiD;AAS9DC,QAAAA,aAAa,EAAE;AAT+C,OAA3C,CAArB;AAWA,YAAMC,YAAY,GAAG,IAAIrK,KAAK,CAACoJ,iBAAV,CAA4B;AAC/ChC,QAAAA,KAAK,EAAE;AADwC,OAA5B,CAArB;AAGA,UAAIkD,QAAQ,GAAG,IAAItK,KAAK,CAACuJ,IAAV,CAAeK,YAAf,EAA6BS,YAA7B,CAAf;AACAC,MAAAA,QAAQ,CAACvE,QAAT,CAAkB8C,CAAlB,GAAsB,CAAtB;AACAyB,MAAAA,QAAQ,CAACvE,QAAT,CAAkBC,CAAlB,GAAsB,CAAtB;AACAsE,MAAAA,QAAQ,CAACvE,QAAT,CAAkBE,CAAlB,GAAsB,EAAtB;AACA,WAAKe,KAAL,CAAWiC,GAAX,CAAeqB,QAAf;AAED,KAtBD;;AAwBA,SAAM,IAAI1E,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,YAAM2E,KAAK,GAAG,IAAIvK,KAAK,CAACwK,YAAV,CACV,CADU,EACN,CADM,EACQ;AAClB,YAAI7H,IAAI,CAACL,GAAL,CAASsD,CAAT,CAFM,EAEO,MAAIjD,IAAI,CAACL,GAAL,CAASsD,CAAT,CAFX,EAEkC;AAC5C,OAHU,EAGN,IAAIjD,IAAI,CAAC8H,EAHH,EAGQ;AAClB,WAJU,EAIQ;AAClB,OALU,CAKQ;AALR,OAAd;AAQA,YAAMC,MAAM,GAAGH,KAAK,CAACI,SAAN,CAAiB,GAAjB,CAAf;AACA,YAAMC,SAAS,GAAG,IAAI5K,KAAK,CAAC6K,cAAV,GAA2BC,aAA3B,CAA0CJ,MAA1C,CAAlB;AACAE,MAAAA,SAAS,CAACG,OAAV,CAAkB,CAACpI,IAAI,CAAC8H,EAAN,GAAW,CAA7B;AACA,YAAMO,SAAS,GAAG,IAAIhL,KAAK,CAACiL,iBAAV,CAA6B;AAAE7D,QAAAA,KAAK,EAAG;AAAV,OAA7B,CAAlB;AACA,YAAM8D,OAAO,GAAG,IAAIlL,KAAK,CAACmL,IAAV,CAAgBP,SAAhB,EAA2BI,SAA3B,CAAhB;AACA,WAAKhE,KAAL,CAAWiC,GAAX,CAAeiC,OAAf;AACD;;AACD,SAAM,IAAItF,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,GAArB,EAA0BA,CAAC,EAA3B,EAAiC;AAC/B,UAAIlD,MAAM,GAAG,KAAKM,eAAL,CAAqB,CAArB,EAAwB,CAAxB,CAAb;AACA,WAAKoI,YAAL,CAAkB1I,MAAlB;AACD;;AACD,SAAKwD,WAAL,GAzFwB,CA0FxB;;AACA,SAAKZ,KAAL;AAEA9D,IAAAA,MAAM,CAAC6J,gBAAP,CAAwB,QAAxB,EAAkC,KAAKhK,gBAAvC;AACAG,IAAAA,MAAM,CAAC6J,gBAAP,CAAyB,WAAzB,EAAsC,KAAKvD,WAA3C,EAAwD,KAAxD;AAEAtG,IAAAA,MAAM,CAAC6J,gBAAP,CAAyB,OAAzB,EAAkC,KAAKtD,YAAvC,EAAqD,KAArD;AACA,SAAKzG,QAAL,CAAc;AAACO,MAAAA,SAAS,EAAG;AAAb,KAAd;AAED;;AAEDuJ,EAAAA,YAAY,CAAC1I,MAAD,EAAS;AACjB,UAAMwG,YAAY,GAAG,IAAIlJ,KAAK,CAACsL,oBAAV,CAA+B,CAA/B,EAAkC,EAAlC,EAAsC,EAAtC,CAArB;AACA,UAAMnE,QAAQ,GAAG,IAAInH,KAAK,CAACoJ,iBAAV,CAA4B;AACzChC,MAAAA,KAAK,EAAE,SADkC;AAEzCiC,MAAAA,SAAS,EAAE;AAF8B,KAA5B,CAAjB;AAIA,QAAIC,QAAQ,GAAG,IAAItJ,KAAK,CAACuJ,IAAV,CAAeL,YAAf,EAA6B/B,QAA7B,CAAf;AAEA,QAAIlF,MAAM,GAAG;AACXS,MAAAA,MAAM,EAAEA,MADG;AAEXG,MAAAA,KAAK,EAAGF,IAAI,CAACU,MAAL,KAAgB;AAFb,KAAb;AAKA,UAAMkI,KAAK,GAAG,KAAK/I,aAAL,CAAmBP,MAAnB,CAAd;AACAqH,IAAAA,QAAQ,CAACvD,QAAT,CAAkBC,CAAlB,GAAsBuF,KAAK,CAAC9I,SAA5B;AACA6G,IAAAA,QAAQ,CAACvD,QAAT,CAAkBE,CAAlB,GAAsBsF,KAAK,CAACzI,SAA5B;AACAwG,IAAAA,QAAQ,CAACvD,QAAT,CAAkB8C,CAAlB,GAAsB,CAAtB;AACA5G,IAAAA,MAAM,CAAC6D,IAAP,GAAcwD,QAAd;AACA,SAAKtH,SAAL,CAAeC,MAAf;AAEAqH,IAAAA,QAAQ,CAACkC,QAAT,CAAkBxF,CAAlB,GAAsBrD,IAAI,CAACU,MAAL,KAAgB,CAAhB,GAAoBV,IAAI,CAAC8H,EAA/C;AACAnB,IAAAA,QAAQ,CAACkC,QAAT,CAAkB3C,CAAlB,GAAsBlG,IAAI,CAACU,MAAL,KAAgB,CAAhB,GAAoBV,IAAI,CAAC8H,EAA/C;AACAnB,IAAAA,QAAQ,CAACkC,QAAT,CAAkBvF,CAAlB,GAAsBtD,IAAI,CAACU,MAAL,KAAgB,CAAhB,GAAoBV,IAAI,CAAC8H,EAA/C;AAEA,UAAMgB,KAAK,GAAG9I,IAAI,CAACU,MAAL,KAAgB,GAA9B;AACAiG,IAAAA,QAAQ,CAACmC,KAAT,CAAezF,CAAf,GAAmByF,KAAnB;AACAnC,IAAAA,QAAQ,CAACmC,KAAT,CAAe5C,CAAf,GAAmB4C,KAAnB;AACAnC,IAAAA,QAAQ,CAACmC,KAAT,CAAexF,CAAf,GAAmBwF,KAAnB;AAEFnC,IAAAA,QAAQ,CAACkC,QAAT,CAAkBxF,CAAlB,GAAsBrD,IAAI,CAACU,MAAL,KAAgB,CAAhB,GAAoBV,IAAI,CAAC8H,EAA/C;AACAnB,IAAAA,QAAQ,CAACkC,QAAT,CAAkB3C,CAAlB,GAAsBlG,IAAI,CAACU,MAAL,KAAgB,CAAhB,GAAoBV,IAAI,CAAC8H,EAA/C;AACAnB,IAAAA,QAAQ,CAACkC,QAAT,CAAkBvF,CAAlB,GAAsBtD,IAAI,CAACU,MAAL,KAAgB,CAAhB,GAAoBV,IAAI,CAAC8H,EAA/C;AAEA,SAAKzD,KAAL,CAAWiC,GAAX,CAAeK,QAAf;AACD;;AAmDDxB,EAAAA,WAAW,CAAE4D,KAAF,EAAU;AAEnB;AACA;AACA,QAAI9E,KAAK,GAAG,KAAKA,KAAjB;AACAA,IAAAA,KAAK,CAACZ,CAAN,GAAY0F,KAAK,CAACC,OAAN,GAAgBnK,MAAM,CAACC,UAAzB,GAAwC,CAAxC,GAA4C,CAAtD;AACAmF,IAAAA,KAAK,CAACiC,CAAN,GAAU,EAAI6C,KAAK,CAACE,OAAN,GAAgBpK,MAAM,CAACG,WAA3B,IAA2C,CAA3C,GAA+C,CAAzD;AACA,QAAI,KAAKY,KAAL,CAAW+E,WAAX,KAA2B,IAA/B,EACE,KAAK/E,KAAL,CAAW+E,WAAX,CAAuBH,QAAvB,CAAgCC,KAAhC,CAAsCC,GAAtC,CAA0C,QAA1C;AACF,SAAK/F,QAAL,CAAc;AAACsF,MAAAA,KAAK,EAAEA,KAAR;AAAeU,MAAAA,WAAW,EAAE;AAA5B,KAAd;AAED;;AAEDS,EAAAA,YAAY,CAAE2D,KAAF,EAAU;AAEpB;AACA;AAEA,QAAI9E,KAAK,GAAG,KAAKA,KAAjB;AACAA,IAAAA,KAAK,CAACZ,CAAN,GAAY0F,KAAK,CAACC,OAAN,GAAgBnK,MAAM,CAACC,UAAzB,GAAwC,CAAxC,GAA4C,CAAtD;AACAmF,IAAAA,KAAK,CAACiC,CAAN,GAAU,EAAI6C,KAAK,CAACE,OAAN,GAAgBpK,MAAM,CAACG,WAA3B,IAA2C,CAA3C,GAA+C,CAAzD;AACA,SAAKL,QAAL,CAAc;AAACsF,MAAAA,KAAK,EAAEA;AAAR,KAAd;;AAEA,QAAI,KAAKrE,KAAL,CAAW+E,WAAX,KAA2B,IAA/B,EAAqC;AACnC,WAAKhG,QAAL,CAAc;AAACoG,QAAAA,UAAU,EAAE;AAAb,OAAd,EAAkC,MAAM;AACtCrF,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWmF,UAAvB;AACA,aAAKpG,QAAL,CAAc;AAACO,UAAAA,SAAS,EAAG;AAAb,SAAd;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiB,KAAKC,KAAL,CAAWV,SAAU,EAAnD;AACD,OAJD;AAKD,KAND,MAMO;AACL,WAAKP,QAAL,CAAc;AAACoG,QAAAA,UAAU,EAAE;AAAb,OAAd,EAAmC,MAAM;AACvCrF,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWmF,UAAvB;AACD,OAFD;AAGD;AAEF;;AA4EDF,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEiB,KAAK,IAAI;AACjB,eAAKA,KAAL,GAAaA,KAAb;AACD;AAFD;AAAA;AAAA;AAAA;AAAA,cADF,EAKG,KAAKlG,KAAL,CAAWV,SAAX,gBACG,QAAC,YAAD;AACI,QAAA,UAAU,EAAE,KAAKgK,UADrB;AAEI,QAAA,UAAU,EAAE,KAAKjK;AAFrB;AAAA;AAAA;AAAA;AAAA,cADH,GAKK,IAVR,EAYG,KAAKW,KAAL,CAAWR,aAAX,gBACG,QAAC,SAAD;AACI,QAAA,eAAe,EAAE,KAAKuB,eAD1B;AAEI,QAAA,WAAW,EAAE,KAAKxB;AAFtB;AAAA;AAAA;AAAA;AAAA,cADH,GAKK,IAjBR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAsBH;;AApXgC;;AAsXnCZ,UAAU,CAAC4K,WAAX,GAAyB7K,iBAAzB;AAEA,eAAeC,UAAf","sourcesContent":["import React, {Component, useLayoutEffect} from \"react\";\nimport * as THREE from \"three\";\nimport { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport LendingPopup from \"../Component/LendingPopup\"\nimport NFTLoader from \"../Component/NFTLoader\"\nimport axios from 'axios';\nimport querystring from 'querystring';\nimport dotenv from 'dotenv';\nimport { NFTStorage, File } from 'nft.storage'\nimport NFTPlanet from '../contracts/NFTplanet.json'\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport BlockchainContext from \"../context/BlockchainContext\";\n\n\nclass ThreeScene extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      planets: [],\n      raycaster: new THREE.Raycaster(),\n      intersected: null,\n      isSelected: false,\n      balance: 0,\n      accounts: null,\n      showPopup: false,\n      showNFTLoader: true,\n      contract: null\n    };\n\n    this.planetArray = [];\n\n    this.mouse = new THREE.Vector2();\n    this.intersected = null;\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.getXYPosition = this.getXYPosition.bind(this);\n    this.getRandomLogInt = this.getRandomLogInt.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseClick = this.onMouseClick.bind(this);\n    this.start = this.start.bind(this);\n    this.closePopup = this.closePopup.bind(this);\n    this.closeLoader = this.closeLoader.bind(this);\n    this.createNFTPlanet = this.createNFTPlanet.bind(this);\n    this.queryGraph = this.queryGraph.bind(this);\n  }\n\n  updateDimensions = () => {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  };\n\n  closePopup=()=> {\n    this.setState({\n      showPopup: false\n    });\n  }\n\n  closeLoader=()=> {\n    this.setState({\n      showNFTLoader: false\n    });\n  }\n\n  async componentDidMount() {\n\n    this.setState({contract: this.context.instance});\n    this.setState({accounts: await this.context.accountsPromise});\n\n    const width = this.state.width;\n    const height = this.state.height;\n    this.scene = new THREE.Scene();\n    this.setState({mouse: new THREE.Vector2()});\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor(\"#263238\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 98;\n    this.camera.position.y = 62;\n    //Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    //LIGHTS\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n\n    //ADD Your 3D Models here\n    const cubeGeometry = new THREE.SphereGeometry(3);\n    const material = new THREE.MeshBasicMaterial({\n      color: '#6ab056',\n      wireframe: true\n    });\n    this.cubeMesh = new THREE.Mesh(cubeGeometry, material);\n    this.cubeMesh.position.x = 36;\n    this.cubeMesh.position.y = 0;\n    this.scene.add(this.cubeMesh);\n\n\n    const loader = new THREE.FontLoader();\n    loader.load( 'fonts/helvetiker_regular.typeface.json', function ( font ) {\n\n      const geometryText = new THREE.TextGeometry( 'Hello three.js!', {\n        font: font,\n        size: 8000,\n        height: 5,\n        curveSegments: 12,\n        bevelEnabled: true,\n        bevelThickness: 10,\n        bevelSize: 8,\n        bevelOffset: 0,\n        bevelSegments: 5\n      } );\n      const materialText = new THREE.MeshBasicMaterial({\n        color: '#6ab056'\n      });\n      let textMesh = new THREE.Mesh(geometryText, materialText);\n      textMesh.position.y = 0;\n      textMesh.position.x = 0;\n      textMesh.position.z = 10;\n      this.scene.add(textMesh);\n\n    } );\n\n    for ( let i = 2; i < 6; i++) {\n      const curve = new THREE.EllipseCurve(\n          0,  0,            // ax, aY\n          100*Math.log(i), 100*Math.log(i),           // xRadius, yRadius\n          0,  2 * Math.PI,  // aStartAngle, aEndAngle\n          false,            // aClockwise\n          0                 // aRotation\n      );\n\n      const points = curve.getPoints( 128 );\n      const geometry3 = new THREE.BufferGeometry().setFromPoints( points );\n      geometry3.rotateX(-Math.PI / 2);\n      const material3 = new THREE.LineBasicMaterial( { color : 0xCC0000 } );\n      const ellipse = new THREE.Line( geometry3, material3 );\n      this.scene.add(ellipse);\n    }\n    for ( let i = 0; i < 100; i ++ ) {\n      let radius = this.getRandomLogInt(2, 5);\n      this.createSphere(radius)\n    }\n    this.renderScene();\n    //start animation\n    this.start();\n\n    window.addEventListener('resize', this.updateDimensions);\n    window.addEventListener( 'mousemove', this.onMouseMove, false );\n\n    window.addEventListener( 'click', this.onMouseClick, false );\n    this.setState({showPopup : true})\n\n  }\n\n  createSphere(radius) {\n      const cubeGeometry = new THREE.SphereBufferGeometry(3, 16, 16);\n      const material = new THREE.MeshBasicMaterial({\n          color: '#6ab056',\n          wireframe: true\n      });\n      let cubeMesh = new THREE.Mesh(cubeGeometry, material);\n\n      let planet = {\n        radius: radius,\n        angle:  Math.random() * 360,\n      }\n\n      const posXY = this.getXYPosition(planet);\n      cubeMesh.position.x = posXY.positionX;\n      cubeMesh.position.z = posXY.positionZ;\n      cubeMesh.position.y = 0;\n      planet.mesh = cubeMesh;\n      this.addPlanet(planet);\n\n      cubeMesh.rotation.x = Math.random() * 2 * Math.PI;\n      cubeMesh.rotation.y = Math.random() * 2 * Math.PI;\n      cubeMesh.rotation.z = Math.random() * 2 * Math.PI;\n      \n      const scale = Math.random() + 0.5;\n      cubeMesh.scale.x = scale;\n      cubeMesh.scale.y = scale;\n      cubeMesh.scale.z = scale;\n\n    cubeMesh.rotation.x = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.y = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.z = Math.random() * 2 * Math.PI;\n\n    this.scene.add(cubeMesh);\n  }\n\n  addPlanet = (planet) => {\n    this.planetArray.push(planet);\n    this.setState({planets: planet}, () => {\n      console.log(this.state.planets);\n    });\n  }\n\n  getXYPosition = (planet) => {\n    return {\n      positionX: planet.radius*Math.cos(planet.angle),\n      positionZ: planet.radius*Math.sin(planet.angle)\n    }\n  }\n\n  getRandomLogInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return 100*Math.log(Math.floor(Math.random() * (max - min + 1)) + min);\n  }\n\n  createNFTPlanet = async (NFTName, NFTDescription, NFTFile) => {\n\n    dotenv.config();\n    //const apiKey = process.env.API_NFT_STORAGE_KEY;\n    const apiKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDIwODZiMDI0NjZEQTQwQjBFNDEyOGM0NTdCMDFDYzZDMzhhYUZhZEIiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYyNzE1NzExMjE5MCwibmFtZSI6IlBsYW5ldE5GVCJ9.wVX9L6uGGTRxxGg7jneXUYgd0Q8lveKFXnWCUo0tvkc\";\n    const client = new NFTStorage({token: apiKey})\n\n    const metadata = await client.store({\n      name: NFTName,\n      description: NFTDescription,\n      image: NFTFile\n    });\n    console.log(metadata.url);\n\n    const mintedPlanet = this.state.contract.methods.mintPlanet(metadata.url, NFTName)\n        .send({from: this.state.accounts[0], value: 0.01*10**18})\n        .then(res => {\n          console.log('Success', res);\n          alert(`You have successfully created an new NFT!`)\n          const IDPlanet = res.events.NewPlanet.returnValues.id;\n          console.log(IDPlanet);\n          return IDPlanet;\n        })\n        .catch(err => console.log(err));\n        \n    console.log(mintedPlanet);\n  }\n\n\n  onMouseMove( event ) {\n\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    let mouse = this.mouse;\n    mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    if (this.state.intersected !== null)\n      this.state.intersected.material.color.set(0x6ab056);\n    this.setState({mouse: mouse, intersected: null});\n\n  }\n\n  onMouseClick( event ) {\n\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n\n    let mouse = this.mouse;\n    mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    this.setState({mouse: mouse})\n\n    if (this.state.intersected !== null) {\n      this.setState({isSelected: true}, () => {\n        console.log(this.state.isSelected);\n        this.setState({showPopup : true})\n        console.log(`is showpopup : ${this.state.showPopup}`);\n      });\n    } else {\n      this.setState({isSelected: false}, () => {\n        console.log(this.state.isSelected);\n      });\n    }\n\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n    for (let i = 0; i < this.planetArray.length; i++) {\n\n      this.planetArray[i].angle = (this.planetArray[i].angle > 360) ? 0 : this.planetArray[i].angle + this.planetArray[i].radius/100000;\n      this.planetArray[i].mesh.position.x = this.getXYPosition(this.planetArray[i]).positionX;\n      this.planetArray[i].mesh.position.z = this.getXYPosition(this.planetArray[i]).positionZ;\n    }\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n\n  };\n\n\n  queryGraph = () => {\n    const APIURL = \"https://gateway.thegraph.com/api/<API_KEY>/subgraphs/id/<SUBGRAPH_ID>\\nx\";\n\n    const tokensQuery = `\n  query {\n    tokens {\n      id\n      tokenID\n      contentURI\n      metadataURI\n    }\n  }\n`\n\n    const client = new ApolloClient({\n      uri: APIURL,\n      cache: new InMemoryCache()\n    });\n\n    client.query({\n      query: gql(tokensQuery)\n    })\n        .then(data => console.log(\"Subgraph data: \", data))\n        .catch(err => { console.log(\"Error fetching data: \", err) });\n  }\n\n  renderScene = () => {\n      // update the picking ray with the camera and mouse position\n    this.state.raycaster.setFromCamera( this.mouse, this.camera );\n\n    // calculate objects intersecting the picking ray\n    const intersects = this.state.raycaster.intersectObjects( this.scene.children );\n\n    if ( intersects.length > 0) {\n\n      intersects[0].object.material.color.set(0xff0000);\n      this.setState({intersected: intersects[0].object});\n    }\n   /* if ( intersects.length > 0) {\n\n      intersects[0].object.material.color.set(0xff0000);\n      this.intersected = intersects[0].object;\n    } else {\n      if (this.intersected !== null) {\n        this.intersected.material.color.set(0x6ab056);\n      }\n      this.intersected = null;\n    }*/\n\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n\n  };\n  render() {\n      return (\n          <div className=\"App\">\n            <div ref={mount => {\n              this.mount = mount\n            }}\n            />\n            {this.state.showPopup ?\n                <LendingPopup\n                    handleLend={this.handleLend}\n                    closePopup={this.closePopup}\n                />\n                : null\n            }\n            {this.state.showNFTLoader ?\n                <NFTLoader\n                    createNFTPlanet={this.createNFTPlanet}\n                    closeLoader={this.closeLoader}\n                />\n                : null\n            }\n          </div>\n      )\n  }\n}\nThreeScene.contextType = BlockchainContext;\n\nexport default ThreeScene;\n"]},"metadata":{},"sourceType":"module"}