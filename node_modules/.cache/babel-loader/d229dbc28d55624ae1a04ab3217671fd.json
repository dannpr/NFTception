{"ast":null,"code":"var _jsxFileName = \"/Users/macdann/Desktop/ethccHack-NFT/Solar-NFT/src/Pages/ThreeScene.js\";\nimport React, { Component, useLayoutEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport LendingPopup from \"../Component/LendingPopup\";\nimport NFTLoader from \"../Component/NFTLoader\";\nimport axios from 'axios';\nimport querystring from 'querystring';\nimport dotenv from 'dotenv';\nimport { NFTStorage, File } from 'nft.storage';\nimport NFTPlanet from '../contracts/NFTplanet.json';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport BlockchainContext from \"../context/BlockchainContext\";\nimport { Mesh, ObjectSpaceNormalMap } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ThreeScene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateDimensions = () => {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    this.closePopup = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.closeLoader = () => {\n      this.setState({\n        showNFTLoader: false\n      });\n    };\n\n    this.addPlanet = planet => {\n      this.planetArray.push(planet);\n      this.setState({\n        planets: planet\n      }, () => {\n        console.log(this.state.planets);\n      });\n    };\n\n    this.getXYPosition = planet => {\n      return {\n        positionX: planet.radius * Math.cos(planet.angle),\n        positionZ: planet.radius * Math.sin(planet.angle)\n      };\n    };\n\n    this.getRandomLogInt = (min, max) => {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return 100 * Math.log(Math.floor(Math.random() * (max - min + 1)) + min);\n    };\n\n    this.createNFTPlanet = async (NFTName, NFTDescription, NFTFile) => {\n      dotenv.config(); //const apiKey = process.env.API_NFT_STORAGE_KEY;\n\n      const apiKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDIwODZiMDI0NjZEQTQwQjBFNDEyOGM0NTdCMDFDYzZDMzhhYUZhZEIiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYyNzE1NzExMjE5MCwibmFtZSI6IlBsYW5ldE5GVCJ9.wVX9L6uGGTRxxGg7jneXUYgd0Q8lveKFXnWCUo0tvkc\";\n      const client = new NFTStorage({\n        token: apiKey\n      });\n      const metadata = await client.store({\n        name: NFTName,\n        description: NFTDescription,\n        image: NFTFile\n      });\n      console.log(metadata.url);\n      const mintedPlanet = await this.state.contract.methods.mintPlanet(metadata.url, NFTName).send({\n        from: this.state.accounts[0],\n        value: 0.002 * 10 ** 18\n      }).then(res => {\n        console.log(res.events.Transfer.returnValues.tokenId);\n        const IDPlanet = res.events.Transfer.returnValues.tokenId;\n        console.log('Success', res);\n        alert('You have successfully created a new NFT! ID : ' + IDPlanet);\n        let radius = this.getRandomLogInt(5, 5);\n        this.createSphere(radius, IDPlanet);\n        return IDPlanet;\n      }).catch(err => console.log(err));\n      console.log(mintedPlanet);\n    };\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      for (let i = 0; i < this.planetArray.length; i++) {\n        this.planetArray[i].angle = this.planetArray[i].angle > 360 ? 0 : this.planetArray[i].angle + this.planetArray[i].radius / 100000;\n        this.planetArray[i].mesh.position.x = this.getXYPosition(this.planetArray[i]).positionX;\n        this.planetArray[i].mesh.position.z = this.getXYPosition(this.planetArray[i]).positionZ;\n      }\n\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.queryPlanetsFromGraph = () => {\n      const planetRequest = `\n            query {\n              transfers {\n                id\n              }\n            }\n          `;\n      const client = new ApolloClient({\n        uri: this.GraphURL,\n        cache: new InMemoryCache()\n      });\n      const result = client.query({\n        query: gql(planetRequest)\n      }).then(data => {\n        console.log(\"Subgraph data: \", data);\n        return data;\n      }).catch(err => {\n        console.log(\"Error fetching data: \", err);\n      });\n      return result;\n    };\n\n    this.queryNftsFromGraph = () => {\n      const nftRequest = `\n          query {\n            nftinplanets {\n              planetid\n              owner\n              nftaddress\n              nftid\n            }\n          }\n          `;\n      const client = new ApolloClient({\n        uri: this.GraphURL,\n        cache: new InMemoryCache()\n      });\n      let receivedData;\n      client.query({\n        query: gql(nftRequest)\n      }).then(data => {\n        console.log(\"Subgraph data: \", data);\n        receivedData = data;\n      }).catch(err => {\n        console.log(\"Error fetching data: \", err);\n      });\n      return receivedData;\n    };\n\n    this.renderScene = () => {\n      // update the picking ray with the camera and mouse position\n      this.state.raycaster.setFromCamera(this.mouse, this.camera); // calculate objects intersecting the picking ray\n\n      const intersects = this.state.raycaster.intersectObjects(this.scene.children);\n\n      if (intersects.length > 0) {\n        intersects[0].object.material.color.set(0xff0000);\n        this.setState({\n          intersected: intersects[0].object\n        });\n      }\n      /* if ( intersects.length > 0) {\n           intersects[0].object.material.color.set(0xff0000);\n         this.intersected = intersects[0].object;\n       } else {\n         if (this.intersected !== null) {\n           this.intersected.material.color.set(0x6ab056);\n         }\n         this.intersected = null;\n       }*/\n\n\n      if (this.renderer) this.renderer.render(this.scene, this.camera);\n    };\n\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      planets: [],\n      raycaster: new THREE.Raycaster(),\n      intersected: null,\n      isSelected: false,\n      balance: 0,\n      accounts: null,\n      showPopup: false,\n      showNFTLoader: true,\n      contract: null,\n      clickPlanetID: 0\n    };\n    this.planetArray = [];\n    this.planetDictionary = {};\n    this.GraphURL = \"https://api.studio.thegraph.com/query/3145/ks/v0.0.15\";\n    this.mouse = new THREE.Vector2();\n    this.intersected = null;\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.getXYPosition = this.getXYPosition.bind(this);\n    this.getRandomLogInt = this.getRandomLogInt.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseClick = this.onMouseClick.bind(this);\n    this.start = this.start.bind(this);\n    this.closePopup = this.closePopup.bind(this);\n    this.closeLoader = this.closeLoader.bind(this);\n    this.createNFTPlanet = this.createNFTPlanet.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({\n      contract: this.context.instance\n    });\n    this.setState({\n      accounts: await this.context.accountsPromise\n    });\n    const width = this.state.width;\n    const height = this.state.height;\n    this.scene = new THREE.Scene();\n    this.setState({\n      mouse: new THREE.Vector2()\n    }); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setClearColor(\"#263238\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 98;\n    this.camera.position.y = 62; //Camera Controls\n\n    const controls = new OrbitControls(this.camera, this.renderer.domElement); //LIGHTS\n\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]); //ADD Your 3D Models here\n\n    const cubeGeometry = new THREE.SphereGeometry(3);\n    const material = new THREE.MeshBasicMaterial({\n      color: '#6ab056',\n      wireframe: true\n    });\n    this.cubeMesh = new THREE.Mesh(cubeGeometry, material);\n    this.cubeMesh.position.x = 36;\n    this.cubeMesh.position.y = 0;\n    this.scene.add(this.cubeMesh);\n    const loader = new THREE.FontLoader();\n    loader.load('fonts/helvetiker_regular.typeface.json', function (font) {\n      const geometryText = new THREE.TextGeometry('Hello three.js!', {\n        font: font,\n        size: 8000,\n        height: 5,\n        curveSegments: 12,\n        bevelEnabled: true,\n        bevelThickness: 10,\n        bevelSize: 8,\n        bevelOffset: 0,\n        bevelSegments: 5\n      });\n      const materialText = new THREE.MeshBasicMaterial({\n        color: '#6ab056'\n      });\n      let textMesh = new THREE.Mesh(geometryText, materialText);\n      textMesh.position.y = 0;\n      textMesh.position.x = 0;\n      textMesh.position.z = 10;\n      this.scene.add(textMesh);\n    });\n\n    for (let i = 2; i < 6; i++) {\n      const curve = new THREE.EllipseCurve(0, 0, // ax, aY\n      100 * Math.log(i), 100 * Math.log(i), // xRadius, yRadius\n      0, 2 * Math.PI, // aStartAngle, aEndAngle\n      false, // aClockwise\n      0 // aRotation\n      );\n      const points = curve.getPoints(128);\n      const geometry3 = new THREE.BufferGeometry().setFromPoints(points);\n      geometry3.rotateX(-Math.PI / 2);\n      const material3 = new THREE.LineBasicMaterial({\n        color: 0xCC0000\n      });\n      const ellipse = new THREE.Line(geometry3, material3);\n      this.scene.add(ellipse);\n    }\n\n    const graphResult = await this.queryPlanetsFromGraph();\n    graphResult.data.transfers.map(transfer => {\n      const radius = this.getRandomLogInt(2, 5);\n      this.createSphere(radius, transfer.id);\n    });\n    this.renderScene(); //start animation\n\n    this.start();\n    window.addEventListener('resize', this.updateDimensions);\n    window.addEventListener('mousemove', this.onMouseMove, false);\n    window.addEventListener('click', this.onMouseClick, false);\n    this.setState({\n      showPopup: true\n    });\n  }\n\n  createSphere(radius, planetID) {\n    console.log(radius);\n    console.log(planetID);\n    const cubeGeometry = new THREE.SphereBufferGeometry(3, 16, 16);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n      wireframe: true\n    });\n    let cubeMesh = new THREE.Mesh(cubeGeometry, material);\n    let planet = {\n      radius: radius,\n      angle: Math.random() * 360,\n      id: planetID\n    };\n    const posXY = this.getXYPosition(planet);\n    cubeMesh.position.x = posXY.positionX;\n    cubeMesh.position.z = posXY.positionZ;\n    cubeMesh.position.y = 0;\n    planet.mesh = cubeMesh;\n    this.planetDictionary[planet.mesh.uuid] = planetID;\n    this.addPlanet(planet);\n    cubeMesh.rotation.x = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.y = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.z = Math.random() * 2 * Math.PI;\n    const scale = Math.random() + 0.5;\n    cubeMesh.scale.x = scale;\n    cubeMesh.scale.y = scale;\n    cubeMesh.scale.z = scale;\n    cubeMesh.rotation.x = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.y = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.z = Math.random() * 2 * Math.PI;\n    this.scene.add(cubeMesh);\n  }\n\n  async fetchNFT(contractAddress, tokenID) {\n    const req = await axios.get(`https://api.opensea.io/api/v1/asset/${contractAddress}/${tokenID}`).then(function (response) {\n      return response;\n    });\n    return {\n      contract: req.data.asset_contract.address,\n      image: req.data.asset_contract.image_url,\n      name: req.data.name,\n      owner: req.data.owner.address,\n      tokenID: req.data.token_id\n    };\n  }\n\n  onMouseMove(event) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    let mouse = this.mouse;\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    if (this.state.intersected !== null) this.state.intersected.material.color.set(0x6ab056);\n    this.setState({\n      mouse: mouse,\n      intersected: null\n    });\n  }\n\n  onMouseClick(event) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    let mouse = this.mouse;\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    this.setState({\n      mouse: mouse\n    }); // console.log(this.state.intersected.type)\n\n    if (this.state.intersected !== null) {\n      if (this.state.intersected.type.toString() === 'Mesh') {\n        console.log(this.state.intersected.uuid);\n        console.log(this.planetDictionary[this.state.intersected.uuid]);\n        this.setState({\n          clickPlanetID: this.planetDictionary[this.state.intersected.uuid]\n        }, () => {\n          console.log(this.state.clickPlanetID);\n        });\n        this.setState({\n          isSelected: true\n        }, () => {\n          console.log(this.state.isSelected);\n          this.setState({\n            showPopup: true\n          });\n          console.log(`is showpopup : ${this.state.showPopup}`);\n        });\n      }\n    } else {\n      this.setState({\n        isSelected: false\n      }, () => {\n        console.log(this.state.isSelected);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), this.state.showPopup ? /*#__PURE__*/_jsxDEV(LendingPopup, {\n        handleLend: this.handleLend,\n        closePopup: this.closePopup,\n        planetID: this.state.clickPlanetID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this) : null, this.state.showNFTLoader ? /*#__PURE__*/_jsxDEV(NFTLoader, {\n        createNFTPlanet: this.createNFTPlanet,\n        closeLoader: this.closeLoader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nThreeScene.contextType = BlockchainContext;\nexport default ThreeScene;","map":{"version":3,"sources":["/Users/macdann/Desktop/ethccHack-NFT/Solar-NFT/src/Pages/ThreeScene.js"],"names":["React","Component","useLayoutEffect","THREE","MTLLoader","OBJLoader","OrbitControls","Nav","Navbar","LendingPopup","NFTLoader","axios","querystring","dotenv","NFTStorage","File","NFTPlanet","ApolloClient","InMemoryCache","gql","BlockchainContext","Mesh","ObjectSpaceNormalMap","ThreeScene","constructor","props","updateDimensions","setState","width","window","innerWidth","height","innerHeight","closePopup","showPopup","closeLoader","showNFTLoader","addPlanet","planet","planetArray","push","planets","console","log","state","getXYPosition","positionX","radius","Math","cos","angle","positionZ","sin","getRandomLogInt","min","max","ceil","floor","random","createNFTPlanet","NFTName","NFTDescription","NFTFile","config","apiKey","client","token","metadata","store","name","description","image","url","mintedPlanet","contract","methods","mintPlanet","send","from","accounts","value","then","res","events","Transfer","returnValues","tokenId","IDPlanet","alert","createSphere","catch","err","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","i","length","mesh","position","x","z","renderScene","queryPlanetsFromGraph","planetRequest","uri","GraphURL","cache","result","query","data","queryNftsFromGraph","nftRequest","receivedData","raycaster","setFromCamera","mouse","camera","intersects","intersectObjects","scene","children","object","material","color","set","intersected","renderer","render","Raycaster","isSelected","balance","clickPlanetID","planetDictionary","Vector2","bind","onMouseMove","onMouseClick","componentDidMount","context","instance","accountsPromise","Scene","WebGLRenderer","antialias","setClearColor","setSize","mount","appendChild","domElement","PerspectiveCamera","y","controls","lights","PointLight","add","cubeGeometry","SphereGeometry","MeshBasicMaterial","wireframe","cubeMesh","loader","FontLoader","load","font","geometryText","TextGeometry","size","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","materialText","textMesh","curve","EllipseCurve","PI","points","getPoints","geometry3","BufferGeometry","setFromPoints","rotateX","material3","LineBasicMaterial","ellipse","Line","graphResult","transfers","map","transfer","id","addEventListener","planetID","SphereBufferGeometry","toString","posXY","uuid","rotation","scale","fetchNFT","contractAddress","tokenID","req","get","response","asset_contract","address","image_url","owner","token_id","event","clientX","clientY","type","handleLend","contextType"],"mappings":"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","sourcesContent":["import React, { Component, useLayoutEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport LendingPopup from \"../Component/LendingPopup\"\nimport NFTLoader from \"../Component/NFTLoader\"\nimport axios from 'axios';\nimport querystring from 'querystring';\nimport dotenv from 'dotenv';\nimport { NFTStorage, File } from 'nft.storage'\nimport NFTPlanet from '../contracts/NFTplanet.json'\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport BlockchainContext from \"../context/BlockchainContext\";\nimport { Mesh, ObjectSpaceNormalMap } from \"three\";\n\n\nclass ThreeScene extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      planets: [],\n      raycaster: new THREE.Raycaster(),\n      intersected: null,\n      isSelected: false,\n      balance: 0,\n      accounts: null,\n      showPopup: false,\n      showNFTLoader: true,\n      contract: null,\n      clickPlanetID: 0,\n    };\n\n    this.planetArray = [];\n    this.planetDictionary = {};\n    this.GraphURL = \"https://api.studio.thegraph.com/query/3145/ks/v0.0.15\";\n    this.mouse = new THREE.Vector2();\n    this.intersected = null;\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.getXYPosition = this.getXYPosition.bind(this);\n    this.getRandomLogInt = this.getRandomLogInt.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseClick = this.onMouseClick.bind(this);\n    this.start = this.start.bind(this);\n    this.closePopup = this.closePopup.bind(this);\n    this.closeLoader = this.closeLoader.bind(this);\n    this.createNFTPlanet = this.createNFTPlanet.bind(this);\n  }\n\n  updateDimensions = () => {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  };\n\n  closePopup = () => {\n    this.setState({\n      showPopup: false\n    });\n  }\n\n  closeLoader = () => {\n    this.setState({\n      showNFTLoader: false\n    });\n  }\n\n  async componentDidMount() {\n\n    this.setState({ contract: this.context.instance });\n    this.setState({ accounts: await this.context.accountsPromise }); \n\n    const width = this.state.width;\n    const height = this.state.height;\n    this.scene = new THREE.Scene();\n    this.setState({ mouse: new THREE.Vector2() });\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor(\"#263238\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 98;\n    this.camera.position.y = 62;\n    //Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    //LIGHTS\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n\n    //ADD Your 3D Models here\n    const cubeGeometry = new THREE.SphereGeometry(3);\n    const material = new THREE.MeshBasicMaterial({\n      color: '#6ab056',\n      wireframe: true\n    });\n    this.cubeMesh = new THREE.Mesh(cubeGeometry, material);\n    this.cubeMesh.position.x = 36;\n    this.cubeMesh.position.y = 0;\n    this.scene.add(this.cubeMesh);\n\n\n    const loader = new THREE.FontLoader();\n    loader.load('fonts/helvetiker_regular.typeface.json', function (font) {\n\n      const geometryText = new THREE.TextGeometry('Hello three.js!', {\n        font: font,\n        size: 8000,\n        height: 5,\n        curveSegments: 12,\n        bevelEnabled: true,\n        bevelThickness: 10,\n        bevelSize: 8,\n        bevelOffset: 0,\n        bevelSegments: 5\n      });\n      const materialText = new THREE.MeshBasicMaterial({\n        color: '#6ab056'\n      });\n      let textMesh = new THREE.Mesh(geometryText, materialText);\n      textMesh.position.y = 0;\n      textMesh.position.x = 0;\n      textMesh.position.z = 10;\n      this.scene.add(textMesh);\n\n    });\n\n    for (let i = 2; i < 6; i++) {\n      const curve = new THREE.EllipseCurve(\n        0, 0,            // ax, aY\n        100 * Math.log(i), 100 * Math.log(i),           // xRadius, yRadius\n        0, 2 * Math.PI,  // aStartAngle, aEndAngle\n        false,            // aClockwise\n        0                 // aRotation\n      );\n\n      const points = curve.getPoints(128);\n      const geometry3 = new THREE.BufferGeometry().setFromPoints(points);\n      geometry3.rotateX(-Math.PI / 2);\n      const material3 = new THREE.LineBasicMaterial({ color: 0xCC0000 });\n      const ellipse = new THREE.Line(geometry3, material3);\n      this.scene.add(ellipse);\n    }\n    \n    const graphResult = await this.queryPlanetsFromGraph();\n    graphResult.data.transfers.map((transfer)=>{\n      const radius = this.getRandomLogInt(2,5);\n      this.createSphere(radius, transfer.id);\n    });\n    this.renderScene();\n    //start animation\n    this.start();\n\n    window.addEventListener('resize', this.updateDimensions);\n    window.addEventListener('mousemove', this.onMouseMove, false);\n\n    window.addEventListener('click', this.onMouseClick, false);\n    this.setState({ showPopup: true })\n\n  }\n\n  createSphere(radius, planetID) {\n    console.log(radius)\n    console.log(planetID)\n    const cubeGeometry = new THREE.SphereBufferGeometry(3, 16, 16);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#\"+ Math.floor(Math.random()*16777215).toString(16),\n      wireframe: true\n    });\n    let cubeMesh = new THREE.Mesh(cubeGeometry, material);\n\n    let planet = {\n      radius: radius,\n      angle: Math.random() * 360,\n      id: planetID,\n    }\n\n    const posXY = this.getXYPosition(planet);\n    cubeMesh.position.x = posXY.positionX;\n    cubeMesh.position.z = posXY.positionZ;\n    cubeMesh.position.y = 0;\n    planet.mesh = cubeMesh;\n    this.planetDictionary[planet.mesh.uuid] = planetID\n    this.addPlanet(planet);\n\n    cubeMesh.rotation.x = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.y = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.z = Math.random() * 2 * Math.PI;\n\n    const scale = Math.random() + 0.5;\n    cubeMesh.scale.x = scale;\n    cubeMesh.scale.y = scale;\n    cubeMesh.scale.z = scale;\n\n    cubeMesh.rotation.x = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.y = Math.random() * 2 * Math.PI;\n    cubeMesh.rotation.z = Math.random() * 2 * Math.PI;\n\n    this.scene.add(cubeMesh);\n  }\n\n  addPlanet = (planet) => {\n    this.planetArray.push(planet);\n    this.setState({ planets: planet }, () => {\n      console.log(this.state.planets);\n    });\n  }\n\n  getXYPosition = (planet) => {\n    return {\n      positionX: planet.radius * Math.cos(planet.angle),\n      positionZ: planet.radius * Math.sin(planet.angle)\n    }\n  }\n\n  getRandomLogInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return 100 * Math.log(Math.floor(Math.random() * (max - min + 1)) + min);\n  }\n\n  createNFTPlanet = async (NFTName, NFTDescription, NFTFile) => {\n\n    dotenv.config();\n    //const apiKey = process.env.API_NFT_STORAGE_KEY;\n    const apiKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDIwODZiMDI0NjZEQTQwQjBFNDEyOGM0NTdCMDFDYzZDMzhhYUZhZEIiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYyNzE1NzExMjE5MCwibmFtZSI6IlBsYW5ldE5GVCJ9.wVX9L6uGGTRxxGg7jneXUYgd0Q8lveKFXnWCUo0tvkc\";\n    const client = new NFTStorage({ token: apiKey })\n\n    const metadata = await client.store({\n      name: NFTName,\n      description: NFTDescription,\n      image: NFTFile\n    });\n    console.log(metadata.url);\n\n    const mintedPlanet = await this.state.contract.methods.mintPlanet(metadata.url, NFTName)\n      .send({ from: this.state.accounts[0], value: 0.002 * 10 ** 18 })\n      .then(res => {\n        console.log(res.events.Transfer.returnValues.tokenId)\n        const IDPlanet = res.events.Transfer.returnValues.tokenId;\n        console.log('Success', res);\n        alert('You have successfully created a new NFT! ID : ' + IDPlanet)\n\n        let radius = this.getRandomLogInt(5, 5);\n        this.createSphere(radius, IDPlanet);\n\n        return IDPlanet;\n      })\n      .catch(err => console.log(err));\n\n    console.log(mintedPlanet)\n  }\n\n  async fetchNFT(contractAddress, tokenID) {\n    const req = await axios.get(`https://api.opensea.io/api/v1/asset/${contractAddress}/${tokenID}`)\n      .then(function (response) {\n        return response\n      })\n    return { contract: req.data.asset_contract.address, image: req.data.asset_contract.image_url, name: req.data.name, owner: req.data.owner.address, tokenID: req.data.token_id };\n  }\n\n  onMouseMove(event) {\n\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    let mouse = this.mouse;\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n    if (this.state.intersected !== null)\n      this.state.intersected.material.color.set(0x6ab056);\n    this.setState({ mouse: mouse, intersected: null });\n\n  }\n\n  onMouseClick(event) {\n\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n\n    let mouse = this.mouse;\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n    this.setState({ mouse: mouse })\n    // console.log(this.state.intersected.type)\n    if (this.state.intersected !== null) {\n      if (this.state.intersected.type.toString() === 'Mesh') {\n        console.log(this.state.intersected.uuid)\n        console.log(this.planetDictionary[this.state.intersected.uuid])\n        this.setState({clickPlanetID: this.planetDictionary[this.state.intersected.uuid]}, () =>  {\n          console.log(this.state.clickPlanetID)\n        })\n        this.setState({ isSelected: true }, () => {\n          console.log(this.state.isSelected);\n          this.setState({ showPopup: true })\n          console.log(`is showpopup : ${this.state.showPopup}`);\n        });\n      }\n    } else {\n      this.setState({ isSelected: false }, () => {\n        console.log(this.state.isSelected);\n      });\n    }\n\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n    for (let i = 0; i < this.planetArray.length; i++) {\n\n      this.planetArray[i].angle = (this.planetArray[i].angle > 360) ? 0 : this.planetArray[i].angle + this.planetArray[i].radius / 100000;\n      this.planetArray[i].mesh.position.x = this.getXYPosition(this.planetArray[i]).positionX;\n      this.planetArray[i].mesh.position.z = this.getXYPosition(this.planetArray[i]).positionZ;\n    }\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n\n  };\n\n  queryPlanetsFromGraph = () => {\n    const planetRequest = `\n            query {\n              transfers {\n                id\n              }\n            }\n          `\n    const client = new ApolloClient({\n      uri: this.GraphURL,\n      cache: new InMemoryCache()\n    });\n\n    const result = client.query({\n      query: gql(planetRequest)\n    })\n      .then(data => {\n        console.log(\"Subgraph data: \", data)\n        return data;\n      })\n      .catch(err => { console.log(\"Error fetching data: \", err) });\n    return result;\n  }\n  queryNftsFromGraph = () => {\n    const nftRequest = `\n          query {\n            nftinplanets {\n              planetid\n              owner\n              nftaddress\n              nftid\n            }\n          }\n          `\n    const client = new ApolloClient({\n      uri: this.GraphURL,\n      cache: new InMemoryCache()\n    });\n\n    let receivedData;\n    client.query({\n      query: gql(nftRequest)\n    })\n      .then(data => {\n        console.log(\"Subgraph data: \", data)\n        receivedData = data;\n      })\n      .catch(err => { console.log(\"Error fetching data: \", err) });\n    return receivedData;\n  }\n\n  renderScene = () => {\n    // update the picking ray with the camera and mouse position\n    this.state.raycaster.setFromCamera(this.mouse, this.camera);\n\n    // calculate objects intersecting the picking ray\n    const intersects = this.state.raycaster.intersectObjects(this.scene.children);\n\n    if (intersects.length > 0) {\n\n      intersects[0].object.material.color.set(0xff0000);\n      this.setState({ intersected: intersects[0].object });\n    }\n    /* if ( intersects.length > 0) {\n \n       intersects[0].object.material.color.set(0xff0000);\n       this.intersected = intersects[0].object;\n     } else {\n       if (this.intersected !== null) {\n         this.intersected.material.color.set(0x6ab056);\n       }\n       this.intersected = null;\n     }*/\n\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div ref={mount => {\n          this.mount = mount\n        }}\n        />\n        {this.state.showPopup ?\n          <LendingPopup\n            handleLend={this.handleLend}\n            closePopup={this.closePopup}\n            planetID={this.state.clickPlanetID}\n          />\n          : null\n        }\n        {this.state.showNFTLoader ?\n          <NFTLoader\n            createNFTPlanet={this.createNFTPlanet}\n            closeLoader={this.closeLoader}\n          />\n          : null\n        }\n      </div>\n    )\n  }\n}\nThreeScene.contextType = BlockchainContext;\n\nexport default ThreeScene;\n"]},"metadata":{},"sourceType":"module"}