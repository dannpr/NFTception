'use strict';

var readerBrowser = require('../lib/reader-browser.js');
var common = require('./common.js');
var verifyStoreReader = require('./verify-store-reader.js');

describe('CarReader fromBytes()', () => {
  it('complete', async () => {
    const reader = await readerBrowser.CarReader.fromBytes(common.carBytes);
    await verifyStoreReader.verifyRoots(reader);
    await verifyStoreReader.verifyHas(reader);
    await verifyStoreReader.verifyGet(reader);
    await verifyStoreReader.verifyBlocks(reader.blocks());
    await verifyStoreReader.verifyCids(reader.cids());
    common.assert.strictEqual(reader.version, 1);
  });
  it('complete (get before has) switch', async () => {
    const reader = await readerBrowser.CarReader.fromBytes(common.carBytes);
    await verifyStoreReader.verifyRoots(reader);
    await verifyStoreReader.verifyGet(reader);
    await verifyStoreReader.verifyHas(reader);
    await verifyStoreReader.verifyBlocks(reader.blocks());
    await verifyStoreReader.verifyCids(reader.cids());
  });
  it('bad argument', async () => {
    for (const arg of [
        true,
        false,
        null,
        undefined,
        'string',
        100,
        { obj: 'nope' }
      ]) {
      await common.assert.isRejected(readerBrowser.CarReader.fromBytes(arg));
    }
  });
  it('decode error - truncated', async () => {
    await common.assert.isRejected(readerBrowser.CarReader.fromBytes(common.carBytes.slice(0, common.carBytes.length - 10)), {
      name: 'Error',
      message: 'Unexpected end of data'
    });
  });
});
describe('CarReader fromIterable()', () => {
  it('complete (single chunk)', async () => {
    const reader = await readerBrowser.CarReader.fromIterable(common.makeIterable(common.carBytes, common.carBytes.length));
    await verifyStoreReader.verifyRoots(reader);
    await verifyStoreReader.verifyHas(reader);
    await verifyStoreReader.verifyGet(reader);
    await verifyStoreReader.verifyBlocks(reader.blocks());
    await verifyStoreReader.verifyCids(reader.cids());
  });
  it('complete (101-byte chunks)', async () => {
    const reader = await readerBrowser.CarReader.fromIterable(common.makeIterable(common.carBytes, 101));
    await verifyStoreReader.verifyRoots(reader);
    await verifyStoreReader.verifyHas(reader);
    await verifyStoreReader.verifyGet(reader);
    await verifyStoreReader.verifyBlocks(reader.blocks());
    await verifyStoreReader.verifyCids(reader.cids());
  });
  it('complete (64-byte chunks)', async () => {
    const reader = await readerBrowser.CarReader.fromIterable(common.makeIterable(common.carBytes, 64));
    await verifyStoreReader.verifyRoots(reader);
    await verifyStoreReader.verifyHas(reader);
    await verifyStoreReader.verifyGet(reader);
    await verifyStoreReader.verifyBlocks(reader.blocks());
    await verifyStoreReader.verifyCids(reader.cids());
  });
  it('complete (32-byte chunks)', async () => {
    const reader = await readerBrowser.CarReader.fromIterable(common.makeIterable(common.carBytes, 32));
    await verifyStoreReader.verifyRoots(reader);
    await verifyStoreReader.verifyHas(reader);
    await verifyStoreReader.verifyGet(reader);
    await verifyStoreReader.verifyBlocks(reader.blocks());
    await verifyStoreReader.verifyCids(reader.cids());
  });
  it('bad argument', async () => {
    for (const arg of [
        new Uint8Array(0),
        true,
        false,
        null,
        undefined,
        'string',
        100,
        { obj: 'nope' }
      ]) {
      await common.assert.isRejected(readerBrowser.CarReader.fromIterable(arg));
    }
  });
  it('decode error - truncated', async () => {
    await common.assert.isRejected(readerBrowser.CarReader.fromIterable(common.makeIterable(common.carBytes.slice(0, common.carBytes.length - 10), 64)), {
      name: 'Error',
      message: 'Unexpected end of data'
    });
  });
});
