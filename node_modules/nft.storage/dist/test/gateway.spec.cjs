'use strict';

var assert = require('uvu/assert');
var nft_storage = require('nft.storage');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var assert__namespace = /*#__PURE__*/_interopNamespace(assert);

const cid = 'bafybeibcepxovpzwu6ug3ofoyejj3a3z5dqqn6invyiqg3jhuzr27ticp4';
const filename = 'yesthisisdog.jpg';

describe('toGatewayURL', () => {
  it('converts ipfs:// URL to a gateway URL', () => {
    const ipfsURL = new URL(`ipfs://${cid}/${filename}`);
    const gwURL = new URL(`https://dweb.link/ipfs/${cid}/${filename}`);
    const result = nft_storage.toGatewayURL(ipfsURL);
    assert__namespace.equal(result.href, gwURL.href);
  });

  it('converts ipfs:// URL (as string) to a gateway URL', () => {
    const ipfsURLStr = `ipfs://${cid}/${filename}`;
    const gwURL = new URL(`https://dweb.link/ipfs/${cid}/${filename}`);
    const result = nft_storage.toGatewayURL(ipfsURLStr);
    assert__namespace.equal(result.href, gwURL.href);
  });

  it('leaves non ipfs:// URL alone', () => {
    const nonIpfsURL = new URL('https://example.com');
    const result = nft_storage.toGatewayURL(nonIpfsURL);
    assert__namespace.equal(result.href, nonIpfsURL.href);
  });
});
//# sourceMappingURL=gateway.spec.cjs.map
